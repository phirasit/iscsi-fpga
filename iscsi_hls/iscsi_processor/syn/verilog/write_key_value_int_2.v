// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module write_key_value_int_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        key_address0,
        key_ce0,
        key_q0,
        value_r,
        instance_data_length_i,
        instance_data_length_o,
        instance_data_length_o_ap_vld,
        instance_data_address0,
        instance_data_ce0,
        instance_data_we0,
        instance_data_d0,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_we0,
        buffer_r_d0,
        buffer_r_q0
);

parameter    ap_ST_fsm_state1 = 41'd1;
parameter    ap_ST_fsm_state2 = 41'd2;
parameter    ap_ST_fsm_state3 = 41'd4;
parameter    ap_ST_fsm_state4 = 41'd8;
parameter    ap_ST_fsm_state5 = 41'd16;
parameter    ap_ST_fsm_state6 = 41'd32;
parameter    ap_ST_fsm_state7 = 41'd64;
parameter    ap_ST_fsm_state8 = 41'd128;
parameter    ap_ST_fsm_state9 = 41'd256;
parameter    ap_ST_fsm_state10 = 41'd512;
parameter    ap_ST_fsm_state11 = 41'd1024;
parameter    ap_ST_fsm_state12 = 41'd2048;
parameter    ap_ST_fsm_state13 = 41'd4096;
parameter    ap_ST_fsm_state14 = 41'd8192;
parameter    ap_ST_fsm_state15 = 41'd16384;
parameter    ap_ST_fsm_state16 = 41'd32768;
parameter    ap_ST_fsm_state17 = 41'd65536;
parameter    ap_ST_fsm_state18 = 41'd131072;
parameter    ap_ST_fsm_state19 = 41'd262144;
parameter    ap_ST_fsm_state20 = 41'd524288;
parameter    ap_ST_fsm_state21 = 41'd1048576;
parameter    ap_ST_fsm_state22 = 41'd2097152;
parameter    ap_ST_fsm_state23 = 41'd4194304;
parameter    ap_ST_fsm_state24 = 41'd8388608;
parameter    ap_ST_fsm_state25 = 41'd16777216;
parameter    ap_ST_fsm_state26 = 41'd33554432;
parameter    ap_ST_fsm_state27 = 41'd67108864;
parameter    ap_ST_fsm_state28 = 41'd134217728;
parameter    ap_ST_fsm_state29 = 41'd268435456;
parameter    ap_ST_fsm_state30 = 41'd536870912;
parameter    ap_ST_fsm_state31 = 41'd1073741824;
parameter    ap_ST_fsm_state32 = 41'd2147483648;
parameter    ap_ST_fsm_state33 = 41'd4294967296;
parameter    ap_ST_fsm_state34 = 41'd8589934592;
parameter    ap_ST_fsm_state35 = 41'd17179869184;
parameter    ap_ST_fsm_state36 = 41'd34359738368;
parameter    ap_ST_fsm_state37 = 41'd68719476736;
parameter    ap_ST_fsm_state38 = 41'd137438953472;
parameter    ap_ST_fsm_state39 = 41'd274877906944;
parameter    ap_ST_fsm_state40 = 41'd549755813888;
parameter    ap_ST_fsm_state41 = 41'd1099511627776;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] key_address0;
output   key_ce0;
input  [7:0] key_q0;
input  [31:0] value_r;
input  [31:0] instance_data_length_i;
output  [31:0] instance_data_length_o;
output   instance_data_length_o_ap_vld;
output  [12:0] instance_data_address0;
output   instance_data_ce0;
output   instance_data_we0;
output  [7:0] instance_data_d0;
output  [4:0] buffer_r_address0;
output   buffer_r_ce0;
output   buffer_r_we0;
output  [7:0] buffer_r_d0;
input  [7:0] buffer_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg key_ce0;
reg[31:0] instance_data_length_o;
reg instance_data_length_o_ap_vld;
reg[12:0] instance_data_address0;
reg instance_data_ce0;
reg instance_data_we0;
reg[7:0] instance_data_d0;
reg[4:0] buffer_r_address0;
reg buffer_r_ce0;
reg buffer_r_we0;
reg[7:0] buffer_r_d0;

(* fsm_encoding = "none" *) reg   [40:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire   [31:0] i_fu_227_p2;
reg   [31:0] i_reg_416;
wire   [31:0] grp_fu_210_p2;
reg   [31:0] add_ln171_reg_424;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln168_fu_233_p2;
wire   [31:0] zext_ln183_fu_254_p1;
wire   [64:0] mul_ln185_fu_274_p2;
reg   [64:0] mul_ln185_reg_440;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln183_fu_258_p2;
reg   [0:0] tmp_4_reg_445;
reg   [28:0] tmp_reg_451;
wire   [31:0] select_ln185_2_fu_333_p3;
reg   [31:0] select_ln185_2_reg_456;
wire    ap_CS_fsm_state5;
wire   [31:0] length_fu_355_p2;
wire    ap_CS_fsm_state39;
wire   [31:0] length_4_fu_372_p2;
reg   [31:0] length_4_reg_469;
wire    ap_CS_fsm_state40;
wire   [0:0] icmp_ln187_fu_366_p2;
wire    ap_CS_fsm_state41;
reg  signed [31:0] i_0_i_reg_133;
reg   [31:0] ap_phi_mux_p_0_ph_phi_fu_147_p4;
wire   [0:0] icmp_ln180_fu_249_p2;
reg   [0:0] ap_phi_mux_length_1_ph_phi_fu_158_p4;
reg  signed [31:0] p_0_reg_166;
reg  signed [31:0] length_1_reg_177;
reg  signed [31:0] instance_data_length_8_reg_187;
reg   [31:0] length_2_reg_196;
wire  signed [63:0] sext_ln168_fu_222_p1;
wire  signed [63:0] sext_ln169_fu_239_p1;
wire  signed [63:0] sext_ln171_fu_244_p1;
wire  signed [63:0] sext_ln184_fu_361_p1;
wire   [63:0] zext_ln188_fu_378_p1;
wire  signed [63:0] sext_ln190_fu_395_p1;
wire  signed [63:0] sext_ln188_fu_400_p1;
wire   [31:0] add_ln190_fu_383_p2;
wire   [7:0] zext_ln184_fu_350_p1;
wire  signed [31:0] grp_fu_210_p0;
wire  signed [31:0] sext_ln169_fu_239_p0;
wire  signed [31:0] sext_ln171_fu_244_p0;
wire   [4:0] grp_fu_264_p1;
wire  signed [31:0] mul_ln185_fu_274_p1;
wire   [64:0] sub_ln185_fu_298_p2;
wire   [28:0] tmp_5_fu_303_p4;
wire  signed [31:0] sext_ln185_3_fu_313_p1;
wire  signed [31:0] sext_ln185_4_fu_317_p1;
wire   [31:0] select_ln185_fu_320_p3;
wire   [31:0] sub_ln185_2_fu_327_p2;
wire   [5:0] grp_fu_264_p2;
wire   [5:0] trunc_ln184_fu_340_p1;
wire   [5:0] add_ln184_fu_344_p2;
wire  signed [31:0] sext_ln188_fu_400_p0;
reg    grp_fu_264_ap_start;
wire    grp_fu_264_ap_done;
reg   [40:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 41'd1;
end

iscsi_interface_srem_32s_5ns_6_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 6 ))
iscsi_interface_srem_32s_5ns_6_36_seq_1_U91(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_264_ap_start),
    .done(grp_fu_264_ap_done),
    .din0(p_0_reg_166),
    .din1(grp_fu_264_p1),
    .ce(1'b1),
    .dout(grp_fu_264_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln168_fu_233_p2 == 1'd0))) begin
        i_0_i_reg_133 <= i_reg_416;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_reg_133 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln183_fu_258_p2 == 1'd1))) begin
        instance_data_length_8_reg_187 <= add_ln171_reg_424;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        instance_data_length_8_reg_187 <= grp_fu_210_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln168_fu_233_p2 == 1'd1))) begin
        length_1_reg_177 <= zext_ln183_fu_254_p1;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        length_1_reg_177 <= length_fu_355_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln183_fu_258_p2 == 1'd1))) begin
        length_2_reg_196 <= length_1_reg_177;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        length_2_reg_196 <= length_4_reg_469;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln168_fu_233_p2 == 1'd1))) begin
        p_0_reg_166 <= ap_phi_mux_p_0_ph_phi_fu_147_p4;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        p_0_reg_166 <= select_ln185_2_reg_456;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln168_fu_233_p2 == 1'd1))) begin
        add_ln171_reg_424 <= grp_fu_210_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_416 <= i_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) & (icmp_ln187_fu_366_p2 == 1'd1))) begin
        length_4_reg_469 <= length_4_fu_372_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln183_fu_258_p2 == 1'd0))) begin
        mul_ln185_reg_440 <= mul_ln185_fu_274_p2;
        tmp_4_reg_445 <= p_0_reg_166[32'd31];
        tmp_reg_451 <= {{mul_ln185_fu_274_p2[64:36]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        select_ln185_2_reg_456 <= select_ln185_2_fu_333_p3;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state40) & (icmp_ln187_fu_366_p2 == 1'd0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln168_fu_233_p2 == 1'd1))) begin
        if ((icmp_ln180_fu_249_p2 == 1'd1)) begin
            ap_phi_mux_length_1_ph_phi_fu_158_p4 = 1'd1;
        end else if ((icmp_ln180_fu_249_p2 == 1'd0)) begin
            ap_phi_mux_length_1_ph_phi_fu_158_p4 = 1'd0;
        end else begin
            ap_phi_mux_length_1_ph_phi_fu_158_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_length_1_ph_phi_fu_158_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln168_fu_233_p2 == 1'd1))) begin
        if ((icmp_ln180_fu_249_p2 == 1'd1)) begin
            ap_phi_mux_p_0_ph_phi_fu_147_p4 = 32'd0;
        end else if ((icmp_ln180_fu_249_p2 == 1'd0)) begin
            ap_phi_mux_p_0_ph_phi_fu_147_p4 = value_r;
        end else begin
            ap_phi_mux_p_0_ph_phi_fu_147_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_p_0_ph_phi_fu_147_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) & (icmp_ln187_fu_366_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        buffer_r_address0 = zext_ln188_fu_378_p1;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        buffer_r_address0 = sext_ln184_fu_361_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_r_address0 = 5'd0;
    end else begin
        buffer_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state3))) begin
        buffer_r_ce0 = 1'b1;
    end else begin
        buffer_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        buffer_r_d0 = zext_ln184_fu_350_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_r_d0 = 8'd48;
    end else begin
        buffer_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln180_fu_249_p2 == 1'd1) & (icmp_ln168_fu_233_p2 == 1'd1)))) begin
        buffer_r_we0 = 1'b1;
    end else begin
        buffer_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln183_fu_258_p2 == 1'd0))) begin
        grp_fu_264_ap_start = 1'b1;
    end else begin
        grp_fu_264_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        instance_data_address0 = sext_ln188_fu_400_p1;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        instance_data_address0 = sext_ln190_fu_395_p1;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln168_fu_233_p2 == 1'd1))) begin
        instance_data_address0 = sext_ln171_fu_244_p1;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln168_fu_233_p2 == 1'd0))) begin
        instance_data_address0 = sext_ln169_fu_239_p1;
    end else begin
        instance_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln168_fu_233_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln168_fu_233_p2 == 1'd1)))) begin
        instance_data_ce0 = 1'b1;
    end else begin
        instance_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        instance_data_d0 = buffer_r_q0;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        instance_data_d0 = 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln168_fu_233_p2 == 1'd1))) begin
        instance_data_d0 = 8'd61;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln168_fu_233_p2 == 1'd0))) begin
        instance_data_d0 = key_q0;
    end else begin
        instance_data_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) & (icmp_ln187_fu_366_p2 == 1'd0))) begin
        instance_data_length_o = add_ln190_fu_383_p2;
    end else if (((1'b1 == ap_CS_fsm_state41) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln168_fu_233_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln168_fu_233_p2 == 1'd1)))) begin
        instance_data_length_o = grp_fu_210_p2;
    end else begin
        instance_data_length_o = instance_data_length_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | ((1'b1 == ap_CS_fsm_state40) & (icmp_ln187_fu_366_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln168_fu_233_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln168_fu_233_p2 == 1'd1)))) begin
        instance_data_length_o_ap_vld = 1'b1;
    end else begin
        instance_data_length_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | ((1'b1 == ap_CS_fsm_state40) & (icmp_ln187_fu_366_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln168_fu_233_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln168_fu_233_p2 == 1'd1)))) begin
        instance_data_we0 = 1'b1;
    end else begin
        instance_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        key_ce0 = 1'b1;
    end else begin
        key_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln168_fu_233_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln183_fu_258_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state40 : begin
            if (((1'b1 == ap_CS_fsm_state40) & (icmp_ln187_fu_366_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln184_fu_344_p2 = ($signed(6'd48) + $signed(trunc_ln184_fu_340_p1));

assign add_ln190_fu_383_p2 = ($signed(instance_data_length_8_reg_187) + $signed(32'd1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign grp_fu_210_p0 = instance_data_length_i;

assign grp_fu_210_p2 = ($signed(grp_fu_210_p0) + $signed(32'd1));

assign grp_fu_264_p1 = 32'd10;

assign i_fu_227_p2 = ($signed(i_0_i_reg_133) + $signed(32'd1));

assign icmp_ln168_fu_233_p2 = ((key_q0 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln180_fu_249_p2 = ((value_r == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln183_fu_258_p2 = ((p_0_reg_166 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln187_fu_366_p2 = (($signed(length_2_reg_196) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign key_address0 = sext_ln168_fu_222_p1;

assign length_4_fu_372_p2 = ($signed(length_2_reg_196) + $signed(32'd4294967295));

assign length_fu_355_p2 = ($signed(32'd1) + $signed(length_1_reg_177));

assign mul_ln185_fu_274_p1 = p_0_reg_166;

assign mul_ln185_fu_274_p2 = ($signed({{1'b0}, {65'd6871947674}}) * $signed(mul_ln185_fu_274_p1));

assign select_ln185_2_fu_333_p3 = ((tmp_4_reg_445[0:0] === 1'b1) ? sub_ln185_2_fu_327_p2 : sext_ln185_4_fu_317_p1);

assign select_ln185_fu_320_p3 = ((tmp_4_reg_445[0:0] === 1'b1) ? sext_ln185_3_fu_313_p1 : sext_ln185_4_fu_317_p1);

assign sext_ln168_fu_222_p1 = i_0_i_reg_133;

assign sext_ln169_fu_239_p0 = instance_data_length_i;

assign sext_ln169_fu_239_p1 = sext_ln169_fu_239_p0;

assign sext_ln171_fu_244_p0 = instance_data_length_i;

assign sext_ln171_fu_244_p1 = sext_ln171_fu_244_p0;

assign sext_ln184_fu_361_p1 = length_1_reg_177;

assign sext_ln185_3_fu_313_p1 = $signed(tmp_5_fu_303_p4);

assign sext_ln185_4_fu_317_p1 = $signed(tmp_reg_451);

assign sext_ln188_fu_400_p0 = instance_data_length_i;

assign sext_ln188_fu_400_p1 = sext_ln188_fu_400_p0;

assign sext_ln190_fu_395_p1 = instance_data_length_8_reg_187;

assign sub_ln185_2_fu_327_p2 = (32'd0 - select_ln185_fu_320_p3);

assign sub_ln185_fu_298_p2 = (65'd0 - mul_ln185_reg_440);

assign tmp_5_fu_303_p4 = {{sub_ln185_fu_298_p2[64:36]}};

assign trunc_ln184_fu_340_p1 = grp_fu_264_p2[5:0];

assign zext_ln183_fu_254_p1 = ap_phi_mux_length_1_ph_phi_fu_158_p4;

assign zext_ln184_fu_350_p1 = add_ln184_fu_344_p2;

assign zext_ln188_fu_378_p1 = length_4_fu_372_p2;

endmodule //write_key_value_int_2
