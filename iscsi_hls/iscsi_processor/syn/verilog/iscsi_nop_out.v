// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module iscsi_nop_out (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        header_buffer_V_address0,
        header_buffer_V_ce0,
        header_buffer_V_q0,
        header_buffer_V_address1,
        header_buffer_V_ce1,
        header_buffer_V_q1,
        tcp_in_V_V_TDATA,
        tcp_in_V_V_TVALID,
        tcp_in_V_V_TREADY,
        tcp_out_V_V_TDATA,
        tcp_out_V_V_TVALID,
        tcp_out_V_V_TREADY,
        instance_stat_sn_i,
        instance_stat_sn_o,
        instance_stat_sn_o_ap_vld,
        instance_exp_cmd_sn,
        instance_max_cmd_sn
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] header_buffer_V_address0;
output   header_buffer_V_ce0;
input  [7:0] header_buffer_V_q0;
output  [5:0] header_buffer_V_address1;
output   header_buffer_V_ce1;
input  [7:0] header_buffer_V_q1;
input  [31:0] tcp_in_V_V_TDATA;
input   tcp_in_V_V_TVALID;
output   tcp_in_V_V_TREADY;
output  [31:0] tcp_out_V_V_TDATA;
output   tcp_out_V_V_TVALID;
input   tcp_out_V_V_TREADY;
input  [31:0] instance_stat_sn_i;
output  [31:0] instance_stat_sn_o;
output   instance_stat_sn_o_ap_vld;
input  [31:0] instance_exp_cmd_sn;
input  [31:0] instance_max_cmd_sn;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] header_buffer_V_address0;
reg header_buffer_V_ce0;
reg[5:0] header_buffer_V_address1;
reg header_buffer_V_ce1;
reg tcp_in_V_V_TREADY;
reg tcp_out_V_V_TVALID;
reg[31:0] instance_stat_sn_o;
reg instance_stat_sn_o_ap_vld;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    tcp_in_V_V_TDATA_blk_n;
wire    ap_CS_fsm_state18;
wire   [0:0] icmp_ln30_fu_637_p2;
reg    tcp_out_V_V_TDATA_blk_n;
reg   [31:0] instance_stat_sn_loa_reg_649;
wire   [5:0] i_fu_464_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln35_fu_458_p2;
wire   [7:0] response_buffer_V_q0;
reg   [7:0] p_Val2_s_reg_674;
wire    ap_CS_fsm_state3;
wire   [7:0] response_buffer_V_q1;
reg   [7:0] p_Val2_5_reg_679;
reg   [7:0] p_Result_7_i_i2_reg_684;
wire    ap_CS_fsm_state5;
wire   [7:0] trunc_ln647_fu_518_p1;
reg   [7:0] trunc_ln647_reg_689;
reg   [7:0] p_Result_7_i8_i_reg_694;
wire    ap_CS_fsm_state7;
wire   [7:0] trunc_ln647_2_fu_558_p1;
reg   [7:0] trunc_ln647_2_reg_699;
reg   [7:0] p_Result_7_i16_i_reg_704;
wire    ap_CS_fsm_state9;
wire   [7:0] trunc_ln647_3_fu_598_p1;
reg   [7:0] trunc_ln647_3_reg_709;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
reg   [7:0] header_buffer_V_load_15_reg_752;
wire    ap_CS_fsm_state17;
wire   [31:0] i_9_fu_643_p2;
reg    ap_block_state18;
reg    ap_block_state18_io;
reg   [5:0] response_buffer_V_address0;
reg    response_buffer_V_ce0;
reg    response_buffer_V_we0;
reg   [7:0] response_buffer_V_d0;
reg   [5:0] response_buffer_V_address1;
reg    response_buffer_V_ce1;
reg    response_buffer_V_we1;
reg   [7:0] response_buffer_V_d1;
reg   [5:0] i_0_i_i_i_reg_432;
reg   [31:0] i_0_reg_443;
wire    ap_CS_fsm_state15;
wire   [63:0] zext_ln35_fu_470_p1;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state10;
wire   [31:0] p_Val2_6_fu_475_p2;
wire   [7:0] p_Result_s_fu_602_p5;
reg   [7:0] p_Result_2_fu_614_p4;
wire    ap_CS_fsm_state16;
wire   [23:0] tmp_4_fu_624_p4;
wire   [31:0] ret_V_fu_633_p1;
reg   [17:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
end

iscsi_login_response_buffer_V #(
    .DataWidth( 8 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
response_buffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(response_buffer_V_address0),
    .ce0(response_buffer_V_ce0),
    .we0(response_buffer_V_we0),
    .d0(response_buffer_V_d0),
    .q0(response_buffer_V_q0),
    .address1(response_buffer_V_address1),
    .ce1(response_buffer_V_ce1),
    .we1(response_buffer_V_we1),
    .d1(response_buffer_V_d1),
    .q1(response_buffer_V_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_i_i_reg_432 <= 6'd0;
    end else if (((icmp_ln35_fu_458_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_i_i_i_reg_432 <= i_fu_464_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state18_io) | ((icmp_ln30_fu_637_p2 == 1'd1) & (tcp_in_V_V_TVALID == 1'b0))) & (icmp_ln30_fu_637_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        i_0_reg_443 <= i_9_fu_643_p2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        i_0_reg_443 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        header_buffer_V_load_15_reg_752 <= header_buffer_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        instance_stat_sn_loa_reg_649 <= instance_stat_sn_i;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_Result_7_i16_i_reg_704 <= {{instance_max_cmd_sn[15:8]}};
        trunc_ln647_3_reg_709 <= trunc_ln647_3_fu_598_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        p_Result_7_i8_i_reg_694 <= {{instance_exp_cmd_sn[15:8]}};
        trunc_ln647_2_reg_699 <= trunc_ln647_2_fu_558_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_Result_7_i_i2_reg_684 <= {{p_Val2_6_fu_475_p2[15:8]}};
        trunc_ln647_reg_689 <= trunc_ln647_fu_518_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_Val2_5_reg_679 <= response_buffer_V_q1;
        p_Val2_s_reg_674 <= response_buffer_V_q0;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state18_io) | ((icmp_ln30_fu_637_p2 == 1'd1) & (tcp_in_V_V_TVALID == 1'b0))) & (icmp_ln30_fu_637_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state18_io) | ((icmp_ln30_fu_637_p2 == 1'd1) & (tcp_in_V_V_TVALID == 1'b0))) & (icmp_ln30_fu_637_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        header_buffer_V_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        header_buffer_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        header_buffer_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        header_buffer_V_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        header_buffer_V_address0 = 64'd16;
    end else begin
        header_buffer_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        header_buffer_V_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        header_buffer_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        header_buffer_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        header_buffer_V_address1 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        header_buffer_V_address1 = 64'd18;
    end else begin
        header_buffer_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        header_buffer_V_ce0 = 1'b1;
    end else begin
        header_buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        header_buffer_V_ce1 = 1'b1;
    end else begin
        header_buffer_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        instance_stat_sn_o = p_Val2_6_fu_475_p2;
    end else begin
        instance_stat_sn_o = instance_stat_sn_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        instance_stat_sn_o_ap_vld = 1'b1;
    end else begin
        instance_stat_sn_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        response_buffer_V_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        response_buffer_V_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        response_buffer_V_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        response_buffer_V_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        response_buffer_V_address0 = 64'd35;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        response_buffer_V_address0 = 64'd33;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        response_buffer_V_address0 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        response_buffer_V_address0 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        response_buffer_V_address0 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        response_buffer_V_address0 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        response_buffer_V_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        response_buffer_V_address0 = 64'd21;
    end else if (((icmp_ln35_fu_458_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        response_buffer_V_address0 = 64'd0;
    end else if (((icmp_ln35_fu_458_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        response_buffer_V_address0 = zext_ln35_fu_470_p1;
    end else begin
        response_buffer_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        response_buffer_V_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        response_buffer_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        response_buffer_V_address1 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        response_buffer_V_address1 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        response_buffer_V_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        response_buffer_V_address1 = 64'd34;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        response_buffer_V_address1 = 64'd32;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        response_buffer_V_address1 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        response_buffer_V_address1 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        response_buffer_V_address1 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        response_buffer_V_address1 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        response_buffer_V_address1 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        response_buffer_V_address1 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        response_buffer_V_address1 = 64'd1;
    end else begin
        response_buffer_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | ((icmp_ln35_fu_458_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln35_fu_458_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        response_buffer_V_ce0 = 1'b1;
    end else begin
        response_buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        response_buffer_V_ce1 = 1'b1;
    end else begin
        response_buffer_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14))) begin
        response_buffer_V_d0 = header_buffer_V_q1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        response_buffer_V_d0 = header_buffer_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        response_buffer_V_d0 = p_Result_2_fu_614_p4;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        response_buffer_V_d0 = trunc_ln647_3_reg_709;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        response_buffer_V_d0 = {{instance_max_cmd_sn[23:16]}};
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        response_buffer_V_d0 = trunc_ln647_2_reg_699;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        response_buffer_V_d0 = {{instance_exp_cmd_sn[23:16]}};
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        response_buffer_V_d0 = trunc_ln647_reg_689;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        response_buffer_V_d0 = {{p_Val2_6_fu_475_p2[23:16]}};
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | ((icmp_ln35_fu_458_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        response_buffer_V_d0 = 8'd0;
    end else begin
        response_buffer_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        response_buffer_V_d1 = header_buffer_V_q1;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12))) begin
        response_buffer_V_d1 = header_buffer_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        response_buffer_V_d1 = p_Result_s_fu_602_p5;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        response_buffer_V_d1 = p_Result_7_i16_i_reg_704;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        response_buffer_V_d1 = {{instance_max_cmd_sn[31:24]}};
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        response_buffer_V_d1 = p_Result_7_i8_i_reg_694;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        response_buffer_V_d1 = {{instance_exp_cmd_sn[31:24]}};
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        response_buffer_V_d1 = p_Result_7_i_i2_reg_684;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        response_buffer_V_d1 = {{p_Val2_6_fu_475_p2[31:24]}};
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        response_buffer_V_d1 = 8'd0;
    end else begin
        response_buffer_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | ((icmp_ln35_fu_458_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        response_buffer_V_we0 = 1'b1;
    end else begin
        response_buffer_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        response_buffer_V_we1 = 1'b1;
    end else begin
        response_buffer_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_fu_637_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        tcp_in_V_V_TDATA_blk_n = tcp_in_V_V_TVALID;
    end else begin
        tcp_in_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state18_io) | ((icmp_ln30_fu_637_p2 == 1'd1) & (tcp_in_V_V_TVALID == 1'b0))) & (icmp_ln30_fu_637_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        tcp_in_V_V_TREADY = 1'b1;
    end else begin
        tcp_in_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_fu_637_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        tcp_out_V_V_TDATA_blk_n = tcp_out_V_V_TREADY;
    end else begin
        tcp_out_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state18_io) | ((icmp_ln30_fu_637_p2 == 1'd1) & (tcp_in_V_V_TVALID == 1'b0))) & (icmp_ln30_fu_637_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        tcp_out_V_V_TVALID = 1'b1;
    end else begin
        tcp_out_V_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln35_fu_458_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if ((~((1'b1 == ap_block_state18_io) | ((icmp_ln30_fu_637_p2 == 1'd1) & (tcp_in_V_V_TVALID == 1'b0))) & (icmp_ln30_fu_637_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((1'b1 == ap_block_state18_io) | ((icmp_ln30_fu_637_p2 == 1'd1) & (tcp_in_V_V_TVALID == 1'b0))) & (icmp_ln30_fu_637_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state18 = ((icmp_ln30_fu_637_p2 == 1'd1) & (tcp_in_V_V_TVALID == 1'b0));
end

always @ (*) begin
    ap_block_state18_io = ((icmp_ln30_fu_637_p2 == 1'd1) & (tcp_out_V_V_TREADY == 1'b0));
end

assign i_9_fu_643_p2 = (i_0_reg_443 + 32'd4);

assign i_fu_464_p2 = (i_0_i_i_i_reg_432 + 6'd1);

assign icmp_ln30_fu_637_p2 = (($signed(i_0_reg_443) < $signed(ret_V_fu_633_p1)) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_458_p2 = ((i_0_i_i_i_reg_432 == 6'd48) ? 1'b1 : 1'b0);

always @ (*) begin
    p_Result_2_fu_614_p4 = p_Val2_5_reg_679;
    p_Result_2_fu_614_p4[32'd7] = |(1'd1);
end

assign p_Result_s_fu_602_p5 = {{p_Val2_s_reg_674[7:6]}, {6'd32}};

assign p_Val2_6_fu_475_p2 = (32'd2 + instance_stat_sn_loa_reg_649);

assign ret_V_fu_633_p1 = tmp_4_fu_624_p4;

assign tcp_out_V_V_TDATA = tcp_in_V_V_TDATA;

assign tmp_4_fu_624_p4 = {{{header_buffer_V_load_15_reg_752}, {header_buffer_V_q0}}, {header_buffer_V_q1}};

assign trunc_ln647_2_fu_558_p1 = instance_exp_cmd_sn[7:0];

assign trunc_ln647_3_fu_598_p1 = instance_max_cmd_sn[7:0];

assign trunc_ln647_fu_518_p1 = p_Val2_6_fu_475_p2[7:0];

assign zext_ln35_fu_470_p1 = i_0_i_i_i_reg_432;

endmodule //iscsi_nop_out
