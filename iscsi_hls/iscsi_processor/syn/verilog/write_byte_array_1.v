// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module write_byte_array_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stream_ap_uint_32_V_V_TDATA,
        stream_ap_uint_32_V_V_TVALID,
        stream_ap_uint_32_V_V_TREADY,
        data_address0,
        data_ce0,
        data_q0,
        data_address1,
        data_ce1,
        data_q1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] stream_ap_uint_32_V_V_TDATA;
output   stream_ap_uint_32_V_V_TVALID;
input   stream_ap_uint_32_V_V_TREADY;
output  [5:0] data_address0;
output   data_ce0;
input  [7:0] data_q0;
output  [5:0] data_address1;
output   data_ce1;
input  [7:0] data_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg stream_ap_uint_32_V_V_TVALID;
reg[5:0] data_address0;
reg data_ce0;
reg[5:0] data_address1;
reg data_ce1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    stream_ap_uint_32_V_V_TDATA_blk_n;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln22_fu_96_p2;
reg   [7:0] data_load_4_reg_170;
wire    ap_CS_fsm_state3;
reg   [7:0] data_load_reg_175;
wire   [5:0] i_fu_140_p2;
reg   [5:0] i_reg_190;
reg   [5:0] i_0_reg_84;
wire   [63:0] zext_ln23_fu_102_p1;
wire   [63:0] zext_ln24_fu_113_p1;
wire   [63:0] zext_ln25_fu_124_p1;
wire   [63:0] zext_ln26_fu_135_p1;
wire   [5:0] or_ln24_fu_107_p2;
wire   [5:0] or_ln25_fu_118_p2;
wire   [5:0] or_ln26_fu_129_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((stream_ap_uint_32_V_V_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_reg_84 <= i_reg_190;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_84 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_load_4_reg_170 <= data_q0;
        data_load_reg_175 <= data_q1;
        i_reg_190 <= i_fu_140_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln22_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_address0 = zext_ln25_fu_124_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data_address0 = zext_ln23_fu_102_p1;
    end else begin
        data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_address1 = zext_ln26_fu_135_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        data_address1 = zext_ln24_fu_113_p1;
    end else begin
        data_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        data_ce0 = 1'b1;
    end else begin
        data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        data_ce1 = 1'b1;
    end else begin
        data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        stream_ap_uint_32_V_V_TDATA_blk_n = stream_ap_uint_32_V_V_TREADY;
    end else begin
        stream_ap_uint_32_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((stream_ap_uint_32_V_V_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        stream_ap_uint_32_V_V_TVALID = 1'b1;
    end else begin
        stream_ap_uint_32_V_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln22_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((stream_ap_uint_32_V_V_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign i_fu_140_p2 = (i_0_reg_84 + 6'd4);

assign icmp_ln22_fu_96_p2 = ((i_0_reg_84 < 6'd48) ? 1'b1 : 1'b0);

assign or_ln24_fu_107_p2 = (i_0_reg_84 | 6'd1);

assign or_ln25_fu_118_p2 = (i_0_reg_84 | 6'd2);

assign or_ln26_fu_129_p2 = (i_0_reg_84 | 6'd3);

assign stream_ap_uint_32_V_V_TDATA = {{{{data_q1}, {data_q0}}, {data_load_reg_175}}, {data_load_4_reg_170}};

assign zext_ln23_fu_102_p1 = i_0_reg_84;

assign zext_ln24_fu_113_p1 = or_ln24_fu_107_p2;

assign zext_ln25_fu_124_p1 = or_ln25_fu_118_p2;

assign zext_ln26_fu_135_p1 = or_ln26_fu_129_p2;

endmodule //write_byte_array_1
