-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity write_to_tcp_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    tcp_out_V_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    tcp_out_V_V_TVALID : OUT STD_LOGIC;
    tcp_out_V_V_TREADY : IN STD_LOGIC;
    instance_data_length : IN STD_LOGIC_VECTOR (31 downto 0);
    instance_data_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    instance_data_ce0 : OUT STD_LOGIC;
    instance_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    instance_data_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    instance_data_ce1 : OUT STD_LOGIC;
    instance_data_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of write_to_tcp_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_write_byte_array_3_fu_18_ap_start : STD_LOGIC;
    signal grp_write_byte_array_3_fu_18_ap_done : STD_LOGIC;
    signal grp_write_byte_array_3_fu_18_ap_idle : STD_LOGIC;
    signal grp_write_byte_array_3_fu_18_ap_ready : STD_LOGIC;
    signal grp_write_byte_array_3_fu_18_stream_ap_uint_32_V_V_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_write_byte_array_3_fu_18_stream_ap_uint_32_V_V_TVALID : STD_LOGIC;
    signal grp_write_byte_array_3_fu_18_stream_ap_uint_32_V_V_TREADY : STD_LOGIC;
    signal grp_write_byte_array_3_fu_18_data_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_write_byte_array_3_fu_18_data_ce0 : STD_LOGIC;
    signal grp_write_byte_array_3_fu_18_data_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_write_byte_array_3_fu_18_data_ce1 : STD_LOGIC;
    signal grp_write_byte_array_3_fu_18_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component write_byte_array_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        stream_ap_uint_32_V_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        stream_ap_uint_32_V_V_TVALID : OUT STD_LOGIC;
        stream_ap_uint_32_V_V_TREADY : IN STD_LOGIC;
        data_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        data_ce1 : OUT STD_LOGIC;
        data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        length_r : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_write_byte_array_3_fu_18 : component write_byte_array_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_write_byte_array_3_fu_18_ap_start,
        ap_done => grp_write_byte_array_3_fu_18_ap_done,
        ap_idle => grp_write_byte_array_3_fu_18_ap_idle,
        ap_ready => grp_write_byte_array_3_fu_18_ap_ready,
        stream_ap_uint_32_V_V_TDATA => grp_write_byte_array_3_fu_18_stream_ap_uint_32_V_V_TDATA,
        stream_ap_uint_32_V_V_TVALID => grp_write_byte_array_3_fu_18_stream_ap_uint_32_V_V_TVALID,
        stream_ap_uint_32_V_V_TREADY => grp_write_byte_array_3_fu_18_stream_ap_uint_32_V_V_TREADY,
        data_address0 => grp_write_byte_array_3_fu_18_data_address0,
        data_ce0 => grp_write_byte_array_3_fu_18_data_ce0,
        data_q0 => instance_data_q0,
        data_address1 => grp_write_byte_array_3_fu_18_data_address1,
        data_ce1 => grp_write_byte_array_3_fu_18_data_ce1,
        data_q1 => instance_data_q1,
        length_r => instance_data_length);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_write_byte_array_3_fu_18_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_write_byte_array_3_fu_18_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_write_byte_array_3_fu_18_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_write_byte_array_3_fu_18_ap_ready = ap_const_logic_1)) then 
                    grp_write_byte_array_3_fu_18_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_write_byte_array_3_fu_18_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_write_byte_array_3_fu_18_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_write_byte_array_3_fu_18_ap_done, ap_CS_fsm_state2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((grp_write_byte_array_3_fu_18_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_write_byte_array_3_fu_18_ap_done, ap_CS_fsm_state2)
    begin
        if (((grp_write_byte_array_3_fu_18_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_write_byte_array_3_fu_18_ap_start <= grp_write_byte_array_3_fu_18_ap_start_reg;
    grp_write_byte_array_3_fu_18_stream_ap_uint_32_V_V_TREADY <= (tcp_out_V_V_TREADY and ap_CS_fsm_state2);
    instance_data_address0 <= grp_write_byte_array_3_fu_18_data_address0;
    instance_data_address1 <= grp_write_byte_array_3_fu_18_data_address1;
    instance_data_ce0 <= grp_write_byte_array_3_fu_18_data_ce0;
    instance_data_ce1 <= grp_write_byte_array_3_fu_18_data_ce1;
    tcp_out_V_V_TDATA <= grp_write_byte_array_3_fu_18_stream_ap_uint_32_V_V_TDATA;
    tcp_out_V_V_TVALID <= grp_write_byte_array_3_fu_18_stream_ap_uint_32_V_V_TVALID;
end behav;
