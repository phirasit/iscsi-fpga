-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity update_value_int_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    iscsi_connection_parameter_data_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    iscsi_connection_parameter_data_ce0 : OUT STD_LOGIC;
    iscsi_connection_parameter_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    idx : IN STD_LOGIC_VECTOR (31 downto 0);
    key_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    key_ce0 : OUT STD_LOGIC;
    key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    val_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of update_value_int_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_1D0 : STD_LOGIC_VECTOR (8 downto 0) := "111010000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal key_load_reg_234 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_fu_121_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln122_fu_115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln132_fu_150_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln132_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal iscsi_connection_par_12_reg_265 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal select_ln138_fu_172_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln134_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nw_val_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_0_i_reg_68 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln123_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_assign_0_in_reg_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal nw_val_0_reg_89 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_0_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln122_fu_110_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln123_fu_132_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln134_fu_156_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln122_fu_115_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln123_fu_127_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln123_fu_137_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln123_1_fu_141_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln138_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln134_fu_179_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln134_2_fu_185_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln134_fu_191_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln134_3_fu_200_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln134_2_fu_206_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln134_fu_194_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_return_preg <= val_0_reg_101;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_fu_144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_i_reg_68 <= i_reg_242;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_i_reg_68 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    idx_assign_0_in_reg_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_fu_115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                idx_assign_0_in_reg_80 <= idx;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                idx_assign_0_in_reg_80 <= add_ln132_reg_255;
            end if; 
        end if;
    end process;

    nw_val_0_reg_89_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_fu_115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                nw_val_0_reg_89 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                nw_val_0_reg_89 <= nw_val_fu_210_p2;
            end if; 
        end if;
    end process;

    val_0_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_fu_144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                val_0_reg_101 <= val_read;
            elsif (((icmp_ln134_fu_161_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                val_0_reg_101 <= select_ln138_fu_172_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln132_reg_255 <= add_ln132_fu_150_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_242 <= i_fu_121_p2;
                key_load_reg_234 <= key_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                iscsi_connection_par_12_reg_265 <= iscsi_connection_parameter_data_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln122_fu_115_p2, ap_CS_fsm_state6, icmp_ln134_fu_161_p2, ap_CS_fsm_state4, icmp_ln123_fu_144_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln122_fu_115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln123_fu_144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln134_fu_161_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln123_fu_127_p2 <= std_logic_vector(signed(i_0_i_reg_68) + signed(idx));
    add_ln132_fu_150_p2 <= std_logic_vector(unsigned(idx_assign_0_in_reg_80) + unsigned(ap_const_lv32_1));
    add_ln134_3_fu_200_p2 <= std_logic_vector(signed(ap_const_lv9_1D0) + signed(zext_ln134_fu_191_p1));
    add_ln134_fu_194_p2 <= std_logic_vector(unsigned(shl_ln134_fu_179_p2) + unsigned(shl_ln134_2_fu_185_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(val_0_reg_101, ap_return_preg, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_return <= val_0_reg_101;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    i_fu_121_p2 <= std_logic_vector(signed(i_0_i_reg_68) + signed(ap_const_lv32_1));
    icmp_ln122_fu_115_p0 <= key_q0;
    icmp_ln122_fu_115_p2 <= "1" when (icmp_ln122_fu_115_p0 = ap_const_lv8_0) else "0";
    icmp_ln123_fu_144_p2 <= "1" when (zext_ln123_fu_137_p1 = sext_ln123_1_fu_141_p1) else "0";
    icmp_ln134_fu_161_p2 <= "1" when (iscsi_connection_parameter_data_q0 = ap_const_lv8_0) else "0";
    icmp_ln138_fu_167_p2 <= "1" when (signed(nw_val_0_reg_89) > signed(val_read)) else "0";

    iscsi_connection_parameter_data_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, sext_ln123_fu_132_p1, sext_ln134_fu_156_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            iscsi_connection_parameter_data_address0 <= sext_ln134_fu_156_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            iscsi_connection_parameter_data_address0 <= sext_ln123_fu_132_p1(13 - 1 downto 0);
        else 
            iscsi_connection_parameter_data_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    iscsi_connection_parameter_data_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            iscsi_connection_parameter_data_ce0 <= ap_const_logic_1;
        else 
            iscsi_connection_parameter_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    key_address0 <= sext_ln122_fu_110_p1(4 - 1 downto 0);

    key_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            key_ce0 <= ap_const_logic_1;
        else 
            key_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    nw_val_fu_210_p2 <= std_logic_vector(signed(sext_ln134_2_fu_206_p1) + signed(add_ln134_fu_194_p2));
    select_ln138_fu_172_p3 <= 
        val_read when (icmp_ln138_fu_167_p2(0) = '1') else 
        nw_val_0_reg_89;
        sext_ln122_fu_110_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_0_i_reg_68),64));

        sext_ln123_1_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(key_load_reg_234),9));

        sext_ln123_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln123_fu_127_p2),64));

        sext_ln134_2_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln134_3_fu_200_p2),32));

        sext_ln134_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln132_fu_150_p2),64));

    shl_ln134_2_fu_185_p2 <= std_logic_vector(shift_left(unsigned(nw_val_0_reg_89),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln134_fu_179_p2 <= std_logic_vector(shift_left(unsigned(nw_val_0_reg_89),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    zext_ln123_fu_137_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iscsi_connection_parameter_data_q0),9));
    zext_ln134_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iscsi_connection_par_12_reg_265),9));
end behav;
