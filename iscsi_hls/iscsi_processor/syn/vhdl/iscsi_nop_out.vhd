-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity iscsi_nop_out is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    header_buffer_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    header_buffer_V_ce0 : OUT STD_LOGIC;
    header_buffer_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    header_buffer_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    header_buffer_V_ce1 : OUT STD_LOGIC;
    header_buffer_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    tcp_in_V_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    tcp_in_V_V_TVALID : IN STD_LOGIC;
    tcp_in_V_V_TREADY : OUT STD_LOGIC;
    tcp_out_V_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    tcp_out_V_V_TVALID : OUT STD_LOGIC;
    tcp_out_V_V_TREADY : IN STD_LOGIC;
    instance_stat_sn_i : IN STD_LOGIC_VECTOR (31 downto 0);
    instance_stat_sn_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    instance_stat_sn_o_ap_vld : OUT STD_LOGIC;
    instance_exp_cmd_sn : IN STD_LOGIC_VECTOR (31 downto 0);
    instance_max_cmd_sn : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of iscsi_nop_out is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011011";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv64_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_const_lv64_21 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100001";
    constant ap_const_lv64_22 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_23 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100011";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tcp_in_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal icmp_ln30_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tcp_out_V_V_TDATA_blk_n : STD_LOGIC;
    signal instance_stat_sn_loa_reg_649 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_464_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln35_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal response_buffer_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_reg_674 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal response_buffer_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_5_reg_679 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_7_i_i2_reg_684 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal trunc_ln647_fu_518_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln647_reg_689 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_7_i8_i_reg_694 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal trunc_ln647_2_fu_558_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln647_2_reg_699 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_7_i16_i_reg_704 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln647_3_fu_598_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln647_3_reg_709 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal header_buffer_V_load_15_reg_752 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal i_9_fu_643_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state18 : BOOLEAN;
    signal ap_block_state18_io : BOOLEAN;
    signal response_buffer_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal response_buffer_V_ce0 : STD_LOGIC;
    signal response_buffer_V_we0 : STD_LOGIC;
    signal response_buffer_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal response_buffer_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal response_buffer_V_ce1 : STD_LOGIC;
    signal response_buffer_V_we1 : STD_LOGIC;
    signal response_buffer_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_i_i_i_reg_432 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_0_reg_443 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zext_ln35_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal p_Val2_6_fu_475_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_602_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_2_fu_614_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_4_fu_624_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal ret_V_fu_633_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component iscsi_login_response_buffer_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    response_buffer_V_U : component iscsi_login_response_buffer_V
    generic map (
        DataWidth => 8,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => response_buffer_V_address0,
        ce0 => response_buffer_V_ce0,
        we0 => response_buffer_V_we0,
        d0 => response_buffer_V_d0,
        q0 => response_buffer_V_q0,
        address1 => response_buffer_V_address1,
        ce1 => response_buffer_V_ce1,
        we1 => response_buffer_V_we1,
        d1 => response_buffer_V_d1,
        q1 => response_buffer_V_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_i_i_i_reg_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_i_i_reg_432 <= ap_const_lv6_0;
            elsif (((icmp_ln35_fu_458_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_i_i_i_reg_432 <= i_fu_464_p2;
            end if; 
        end if;
    end process;

    i_0_reg_443_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state18_io) or ((icmp_ln30_fu_637_p2 = ap_const_lv1_1) and (tcp_in_V_V_TVALID = ap_const_logic_0)))) and (icmp_ln30_fu_637_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                i_0_reg_443 <= i_9_fu_643_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_0_reg_443 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                header_buffer_V_load_15_reg_752 <= header_buffer_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                instance_stat_sn_loa_reg_649 <= instance_stat_sn_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                p_Result_7_i16_i_reg_704 <= instance_max_cmd_sn(15 downto 8);
                trunc_ln647_3_reg_709 <= trunc_ln647_3_fu_598_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                p_Result_7_i8_i_reg_694 <= instance_exp_cmd_sn(15 downto 8);
                trunc_ln647_2_reg_699 <= trunc_ln647_2_fu_558_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                p_Result_7_i_i2_reg_684 <= p_Val2_6_fu_475_p2(15 downto 8);
                trunc_ln647_reg_689 <= trunc_ln647_fu_518_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                p_Val2_5_reg_679 <= response_buffer_V_q1;
                p_Val2_s_reg_674 <= response_buffer_V_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tcp_in_V_V_TVALID, ap_CS_fsm_state18, icmp_ln30_fu_637_p2, ap_CS_fsm_state2, icmp_ln35_fu_458_p2, ap_block_state18_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln35_fu_458_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if ((not(((ap_const_boolean_1 = ap_block_state18_io) or ((icmp_ln30_fu_637_p2 = ap_const_lv1_1) and (tcp_in_V_V_TVALID = ap_const_logic_0)))) and (icmp_ln30_fu_637_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((ap_const_boolean_1 = ap_block_state18_io) or ((icmp_ln30_fu_637_p2 = ap_const_lv1_1) and (tcp_in_V_V_TVALID = ap_const_logic_0)))) and (icmp_ln30_fu_637_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state18_assign_proc : process(tcp_in_V_V_TVALID, icmp_ln30_fu_637_p2)
    begin
                ap_block_state18 <= ((icmp_ln30_fu_637_p2 = ap_const_lv1_1) and (tcp_in_V_V_TVALID = ap_const_logic_0));
    end process;


    ap_block_state18_io_assign_proc : process(tcp_out_V_V_TREADY, icmp_ln30_fu_637_p2)
    begin
                ap_block_state18_io <= ((icmp_ln30_fu_637_p2 = ap_const_lv1_1) and (tcp_out_V_V_TREADY = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, tcp_in_V_V_TVALID, ap_CS_fsm_state18, icmp_ln30_fu_637_p2, ap_block_state18_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state18_io) or ((icmp_ln30_fu_637_p2 = ap_const_lv1_1) and (tcp_in_V_V_TVALID = ap_const_logic_0)))) and (icmp_ln30_fu_637_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tcp_in_V_V_TVALID, ap_CS_fsm_state18, icmp_ln30_fu_637_p2, ap_block_state18_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state18_io) or ((icmp_ln30_fu_637_p2 = ap_const_lv1_1) and (tcp_in_V_V_TVALID = ap_const_logic_0)))) and (icmp_ln30_fu_637_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    header_buffer_V_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            header_buffer_V_address0 <= ap_const_lv64_6(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            header_buffer_V_address0 <= ap_const_lv64_7(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            header_buffer_V_address0 <= ap_const_lv64_5(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            header_buffer_V_address0 <= ap_const_lv64_11(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            header_buffer_V_address0 <= ap_const_lv64_10(6 - 1 downto 0);
        else 
            header_buffer_V_address0 <= "XXXXXX";
        end if; 
    end process;


    header_buffer_V_address1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            header_buffer_V_address1 <= ap_const_lv64_7(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            header_buffer_V_address1 <= ap_const_lv64_5(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            header_buffer_V_address1 <= ap_const_lv64_6(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            header_buffer_V_address1 <= ap_const_lv64_13(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            header_buffer_V_address1 <= ap_const_lv64_12(6 - 1 downto 0);
        else 
            header_buffer_V_address1 <= "XXXXXX";
        end if; 
    end process;


    header_buffer_V_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            header_buffer_V_ce0 <= ap_const_logic_1;
        else 
            header_buffer_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    header_buffer_V_ce1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            header_buffer_V_ce1 <= ap_const_logic_1;
        else 
            header_buffer_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    i_9_fu_643_p2 <= std_logic_vector(unsigned(i_0_reg_443) + unsigned(ap_const_lv32_4));
    i_fu_464_p2 <= std_logic_vector(unsigned(i_0_i_i_i_reg_432) + unsigned(ap_const_lv6_1));
    icmp_ln30_fu_637_p2 <= "1" when (signed(i_0_reg_443) < signed(ret_V_fu_633_p1)) else "0";
    icmp_ln35_fu_458_p2 <= "1" when (i_0_i_i_i_reg_432 = ap_const_lv6_30) else "0";

    instance_stat_sn_o_assign_proc : process(instance_stat_sn_i, ap_CS_fsm_state5, p_Val2_6_fu_475_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            instance_stat_sn_o <= p_Val2_6_fu_475_p2;
        else 
            instance_stat_sn_o <= instance_stat_sn_i;
        end if; 
    end process;


    instance_stat_sn_o_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            instance_stat_sn_o_ap_vld <= ap_const_logic_1;
        else 
            instance_stat_sn_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    
    p_Result_2_fu_614_p4_proc : process(p_Val2_5_reg_679)
    begin
        p_Result_2_fu_614_p4 <= p_Val2_5_reg_679;
        p_Result_2_fu_614_p4(7) <= ap_const_lv1_1(0);
    end process;

    p_Result_s_fu_602_p5 <= (p_Val2_s_reg_674(7 downto 6) & ap_const_lv6_20);
    p_Val2_6_fu_475_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(instance_stat_sn_loa_reg_649));

    response_buffer_V_address0_assign_proc : process(ap_CS_fsm_state2, icmp_ln35_fu_458_p2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, zext_ln35_fu_470_p1, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            response_buffer_V_address0 <= ap_const_lv64_6(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            response_buffer_V_address0 <= ap_const_lv64_13(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            response_buffer_V_address0 <= ap_const_lv64_11(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            response_buffer_V_address0 <= ap_const_lv64_1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            response_buffer_V_address0 <= ap_const_lv64_23(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            response_buffer_V_address0 <= ap_const_lv64_21(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            response_buffer_V_address0 <= ap_const_lv64_1F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            response_buffer_V_address0 <= ap_const_lv64_1D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            response_buffer_V_address0 <= ap_const_lv64_1B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            response_buffer_V_address0 <= ap_const_lv64_19(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            response_buffer_V_address0 <= ap_const_lv64_17(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            response_buffer_V_address0 <= ap_const_lv64_15(6 - 1 downto 0);
        elsif (((icmp_ln35_fu_458_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            response_buffer_V_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        elsif (((icmp_ln35_fu_458_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            response_buffer_V_address0 <= zext_ln35_fu_470_p1(6 - 1 downto 0);
        else 
            response_buffer_V_address0 <= "XXXXXX";
        end if; 
    end process;


    response_buffer_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            response_buffer_V_address1 <= ap_const_lv64_7(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            response_buffer_V_address1 <= ap_const_lv64_5(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            response_buffer_V_address1 <= ap_const_lv64_12(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            response_buffer_V_address1 <= ap_const_lv64_10(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            response_buffer_V_address1 <= ap_const_lv64_0(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            response_buffer_V_address1 <= ap_const_lv64_22(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            response_buffer_V_address1 <= ap_const_lv64_20(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            response_buffer_V_address1 <= ap_const_lv64_1E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            response_buffer_V_address1 <= ap_const_lv64_1C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            response_buffer_V_address1 <= ap_const_lv64_1A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            response_buffer_V_address1 <= ap_const_lv64_18(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            response_buffer_V_address1 <= ap_const_lv64_16(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            response_buffer_V_address1 <= ap_const_lv64_14(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            response_buffer_V_address1 <= ap_const_lv64_1(6 - 1 downto 0);
        else 
            response_buffer_V_address1 <= "XXXXXX";
        end if; 
    end process;


    response_buffer_V_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln35_fu_458_p2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln35_fu_458_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln35_fu_458_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            response_buffer_V_ce0 <= ap_const_logic_1;
        else 
            response_buffer_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    response_buffer_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            response_buffer_V_ce1 <= ap_const_logic_1;
        else 
            response_buffer_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    response_buffer_V_d0_assign_proc : process(header_buffer_V_q0, header_buffer_V_q1, instance_exp_cmd_sn, instance_max_cmd_sn, ap_CS_fsm_state2, icmp_ln35_fu_458_p2, ap_CS_fsm_state3, ap_CS_fsm_state5, trunc_ln647_reg_689, ap_CS_fsm_state7, trunc_ln647_2_reg_699, ap_CS_fsm_state9, trunc_ln647_3_reg_709, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, p_Val2_6_fu_475_p2, p_Result_2_fu_614_p4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            response_buffer_V_d0 <= header_buffer_V_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            response_buffer_V_d0 <= header_buffer_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            response_buffer_V_d0 <= p_Result_2_fu_614_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            response_buffer_V_d0 <= trunc_ln647_3_reg_709;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            response_buffer_V_d0 <= instance_max_cmd_sn(23 downto 16);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            response_buffer_V_d0 <= trunc_ln647_2_reg_699;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            response_buffer_V_d0 <= instance_exp_cmd_sn(23 downto 16);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            response_buffer_V_d0 <= trunc_ln647_reg_689;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            response_buffer_V_d0 <= p_Val2_6_fu_475_p2(23 downto 16);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln35_fu_458_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            response_buffer_V_d0 <= ap_const_lv8_0;
        else 
            response_buffer_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    response_buffer_V_d1_assign_proc : process(header_buffer_V_q0, header_buffer_V_q1, instance_exp_cmd_sn, instance_max_cmd_sn, ap_CS_fsm_state3, p_Result_7_i_i2_reg_684, ap_CS_fsm_state5, p_Result_7_i8_i_reg_694, ap_CS_fsm_state7, p_Result_7_i16_i_reg_704, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, p_Val2_6_fu_475_p2, p_Result_s_fu_602_p5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            response_buffer_V_d1 <= header_buffer_V_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            response_buffer_V_d1 <= header_buffer_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            response_buffer_V_d1 <= p_Result_s_fu_602_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            response_buffer_V_d1 <= p_Result_7_i16_i_reg_704;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            response_buffer_V_d1 <= instance_max_cmd_sn(31 downto 24);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            response_buffer_V_d1 <= p_Result_7_i8_i_reg_694;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            response_buffer_V_d1 <= instance_exp_cmd_sn(31 downto 24);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            response_buffer_V_d1 <= p_Result_7_i_i2_reg_684;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            response_buffer_V_d1 <= p_Val2_6_fu_475_p2(31 downto 24);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            response_buffer_V_d1 <= ap_const_lv8_0;
        else 
            response_buffer_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    response_buffer_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln35_fu_458_p2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((icmp_ln35_fu_458_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            response_buffer_V_we0 <= ap_const_logic_1;
        else 
            response_buffer_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    response_buffer_V_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            response_buffer_V_we1 <= ap_const_logic_1;
        else 
            response_buffer_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_624_p4),32));

    tcp_in_V_V_TDATA_blk_n_assign_proc : process(tcp_in_V_V_TVALID, ap_CS_fsm_state18, icmp_ln30_fu_637_p2)
    begin
        if (((icmp_ln30_fu_637_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            tcp_in_V_V_TDATA_blk_n <= tcp_in_V_V_TVALID;
        else 
            tcp_in_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    tcp_in_V_V_TREADY_assign_proc : process(tcp_in_V_V_TVALID, ap_CS_fsm_state18, icmp_ln30_fu_637_p2, ap_block_state18_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state18_io) or ((icmp_ln30_fu_637_p2 = ap_const_lv1_1) and (tcp_in_V_V_TVALID = ap_const_logic_0)))) and (icmp_ln30_fu_637_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            tcp_in_V_V_TREADY <= ap_const_logic_1;
        else 
            tcp_in_V_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    tcp_out_V_V_TDATA <= tcp_in_V_V_TDATA;

    tcp_out_V_V_TDATA_blk_n_assign_proc : process(tcp_out_V_V_TREADY, ap_CS_fsm_state18, icmp_ln30_fu_637_p2)
    begin
        if (((icmp_ln30_fu_637_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            tcp_out_V_V_TDATA_blk_n <= tcp_out_V_V_TREADY;
        else 
            tcp_out_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    tcp_out_V_V_TVALID_assign_proc : process(tcp_in_V_V_TVALID, ap_CS_fsm_state18, icmp_ln30_fu_637_p2, ap_block_state18_io)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state18_io) or ((icmp_ln30_fu_637_p2 = ap_const_lv1_1) and (tcp_in_V_V_TVALID = ap_const_logic_0)))) and (icmp_ln30_fu_637_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            tcp_out_V_V_TVALID <= ap_const_logic_1;
        else 
            tcp_out_V_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    tmp_4_fu_624_p4 <= ((header_buffer_V_load_15_reg_752 & header_buffer_V_q0) & header_buffer_V_q1);
    trunc_ln647_2_fu_558_p1 <= instance_exp_cmd_sn(8 - 1 downto 0);
    trunc_ln647_3_fu_598_p1 <= instance_max_cmd_sn(8 - 1 downto 0);
    trunc_ln647_fu_518_p1 <= p_Val2_6_fu_475_p2(8 - 1 downto 0);
    zext_ln35_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_i_reg_432),64));
end behav;
