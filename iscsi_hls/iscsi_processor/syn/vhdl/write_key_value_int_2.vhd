-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity write_key_value_int_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    key_ce0 : OUT STD_LOGIC;
    key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    value_r : IN STD_LOGIC_VECTOR (31 downto 0);
    instance_data_length_i : IN STD_LOGIC_VECTOR (31 downto 0);
    instance_data_length_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    instance_data_length_o_ap_vld : OUT STD_LOGIC;
    instance_data_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    instance_data_ce0 : OUT STD_LOGIC;
    instance_data_we0 : OUT STD_LOGIC;
    instance_data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    buffer_r_ce0 : OUT STD_LOGIC;
    buffer_r_we0 : OUT STD_LOGIC;
    buffer_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    buffer_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of write_key_value_int_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (40 downto 0) := "00000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (40 downto 0) := "00000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (40 downto 0) := "00000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (40 downto 0) := "00000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (40 downto 0) := "00000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (40 downto 0) := "00000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (40 downto 0) := "00001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (40 downto 0) := "00010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (40 downto 0) := "00100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (40 downto 0) := "01000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (40 downto 0) := "10000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv8_3D : STD_LOGIC_VECTOR (7 downto 0) := "00111101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_30 : STD_LOGIC_VECTOR (7 downto 0) := "00110000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv65_19999999A : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000110011001100110011001100110011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_416 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln171_reg_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln168_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln183_fu_254_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln185_fu_274_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln185_reg_440 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln183_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_445 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_451 : STD_LOGIC_VECTOR (28 downto 0);
    signal select_ln185_2_fu_333_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln185_2_reg_456 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal length_fu_355_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal length_4_fu_372_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal length_4_reg_469 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal icmp_ln187_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal i_0_i_reg_133 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_0_ph_phi_fu_147_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln180_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_length_1_ph_phi_fu_158_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_reg_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal length_1_reg_177 : STD_LOGIC_VECTOR (31 downto 0);
    signal instance_data_length_8_reg_187 : STD_LOGIC_VECTOR (31 downto 0);
    signal length_2_reg_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln168_fu_222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln169_fu_239_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln171_fu_244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln184_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln188_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln190_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln188_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln190_fu_383_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln184_fu_350_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_210_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln169_fu_239_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln171_fu_244_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_264_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln185_fu_274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln185_fu_298_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_5_fu_303_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln185_3_fu_313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln185_4_fu_317_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln185_fu_320_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln185_2_fu_327_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_264_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln184_fu_340_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln184_fu_344_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln188_fu_400_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_264_ap_start : STD_LOGIC;
    signal grp_fu_264_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (40 downto 0);

    component iscsi_interface_srem_32s_5ns_6_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    iscsi_interface_srem_32s_5ns_6_36_seq_1_U91 : component iscsi_interface_srem_32s_5ns_6_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 5,
        dout_WIDTH => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_264_ap_start,
        done => grp_fu_264_ap_done,
        din0 => p_0_reg_166,
        din1 => grp_fu_264_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_264_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_i_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln168_fu_233_p2 = ap_const_lv1_0))) then 
                i_0_i_reg_133 <= i_reg_416;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_133 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    instance_data_length_8_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln183_fu_258_p2 = ap_const_lv1_1))) then 
                instance_data_length_8_reg_187 <= add_ln171_reg_424;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                instance_data_length_8_reg_187 <= grp_fu_210_p2;
            end if; 
        end if;
    end process;

    length_1_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln168_fu_233_p2 = ap_const_lv1_1))) then 
                length_1_reg_177 <= zext_ln183_fu_254_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                length_1_reg_177 <= length_fu_355_p2;
            end if; 
        end if;
    end process;

    length_2_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln183_fu_258_p2 = ap_const_lv1_1))) then 
                length_2_reg_196 <= length_1_reg_177;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                length_2_reg_196 <= length_4_reg_469;
            end if; 
        end if;
    end process;

    p_0_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln168_fu_233_p2 = ap_const_lv1_1))) then 
                p_0_reg_166 <= ap_phi_mux_p_0_ph_phi_fu_147_p4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                p_0_reg_166 <= select_ln185_2_reg_456;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln168_fu_233_p2 = ap_const_lv1_1))) then
                add_ln171_reg_424 <= grp_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_416 <= i_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) and (icmp_ln187_fu_366_p2 = ap_const_lv1_1))) then
                length_4_reg_469 <= length_4_fu_372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln183_fu_258_p2 = ap_const_lv1_0))) then
                mul_ln185_reg_440 <= mul_ln185_fu_274_p2;
                tmp_4_reg_445 <= p_0_reg_166(31 downto 31);
                tmp_reg_451 <= mul_ln185_fu_274_p2(64 downto 36);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                select_ln185_2_reg_456 <= select_ln185_2_fu_333_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln168_fu_233_p2, ap_CS_fsm_state4, icmp_ln183_fu_258_p2, ap_CS_fsm_state40, icmp_ln187_fu_366_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln168_fu_233_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln183_fu_258_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (icmp_ln187_fu_366_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln184_fu_344_p2 <= std_logic_vector(signed(ap_const_lv6_30) + signed(trunc_ln184_fu_340_p1));
    add_ln190_fu_383_p2 <= std_logic_vector(signed(instance_data_length_8_reg_187) + signed(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state40, icmp_ln187_fu_366_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (icmp_ln187_fu_366_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_length_1_ph_phi_fu_158_p4_assign_proc : process(ap_CS_fsm_state3, icmp_ln168_fu_233_p2, icmp_ln180_fu_249_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln168_fu_233_p2 = ap_const_lv1_1))) then
            if ((icmp_ln180_fu_249_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_length_1_ph_phi_fu_158_p4 <= ap_const_lv1_1;
            elsif ((icmp_ln180_fu_249_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_length_1_ph_phi_fu_158_p4 <= ap_const_lv1_0;
            else 
                ap_phi_mux_length_1_ph_phi_fu_158_p4 <= "X";
            end if;
        else 
            ap_phi_mux_length_1_ph_phi_fu_158_p4 <= "X";
        end if; 
    end process;


    ap_phi_mux_p_0_ph_phi_fu_147_p4_assign_proc : process(value_r, ap_CS_fsm_state3, icmp_ln168_fu_233_p2, icmp_ln180_fu_249_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln168_fu_233_p2 = ap_const_lv1_1))) then
            if ((icmp_ln180_fu_249_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_p_0_ph_phi_fu_147_p4 <= ap_const_lv32_0;
            elsif ((icmp_ln180_fu_249_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_p_0_ph_phi_fu_147_p4 <= value_r;
            else 
                ap_phi_mux_p_0_ph_phi_fu_147_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_p_0_ph_phi_fu_147_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state40, icmp_ln187_fu_366_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) and (icmp_ln187_fu_366_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buffer_r_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state39, ap_CS_fsm_state40, sext_ln184_fu_361_p1, zext_ln188_fu_378_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            buffer_r_address0 <= zext_ln188_fu_378_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            buffer_r_address0 <= sext_ln184_fu_361_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffer_r_address0 <= ap_const_lv5_0;
        else 
            buffer_r_address0 <= "XXXXX";
        end if; 
    end process;


    buffer_r_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state39, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            buffer_r_ce0 <= ap_const_logic_1;
        else 
            buffer_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_r_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state39, zext_ln184_fu_350_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            buffer_r_d0 <= zext_ln184_fu_350_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            buffer_r_d0 <= ap_const_lv8_30;
        else 
            buffer_r_d0 <= "XXXXXXXX";
        end if; 
    end process;


    buffer_r_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln168_fu_233_p2, ap_CS_fsm_state39, icmp_ln180_fu_249_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln180_fu_249_p2 = ap_const_lv1_1) and (icmp_ln168_fu_233_p2 = ap_const_lv1_1)))) then 
            buffer_r_we0 <= ap_const_logic_1;
        else 
            buffer_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_210_p0 <= instance_data_length_i;
    grp_fu_210_p2 <= std_logic_vector(signed(grp_fu_210_p0) + signed(ap_const_lv32_1));

    grp_fu_264_ap_start_assign_proc : process(ap_CS_fsm_state4, icmp_ln183_fu_258_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln183_fu_258_p2 = ap_const_lv1_0))) then 
            grp_fu_264_ap_start <= ap_const_logic_1;
        else 
            grp_fu_264_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_264_p1 <= ap_const_lv32_A(5 - 1 downto 0);
    i_fu_227_p2 <= std_logic_vector(signed(i_0_i_reg_133) + signed(ap_const_lv32_1));
    icmp_ln168_fu_233_p2 <= "1" when (key_q0 = ap_const_lv8_0) else "0";
    icmp_ln180_fu_249_p2 <= "1" when (value_r = ap_const_lv32_0) else "0";
    icmp_ln183_fu_258_p2 <= "1" when (p_0_reg_166 = ap_const_lv32_0) else "0";
    icmp_ln187_fu_366_p2 <= "1" when (signed(length_2_reg_196) > signed(ap_const_lv32_0)) else "0";

    instance_data_address0_assign_proc : process(ap_CS_fsm_state3, icmp_ln168_fu_233_p2, ap_CS_fsm_state40, ap_CS_fsm_state41, sext_ln169_fu_239_p1, sext_ln171_fu_244_p1, sext_ln190_fu_395_p1, sext_ln188_fu_400_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            instance_data_address0 <= sext_ln188_fu_400_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            instance_data_address0 <= sext_ln190_fu_395_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln168_fu_233_p2 = ap_const_lv1_1))) then 
            instance_data_address0 <= sext_ln171_fu_244_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln168_fu_233_p2 = ap_const_lv1_0))) then 
            instance_data_address0 <= sext_ln169_fu_239_p1(13 - 1 downto 0);
        else 
            instance_data_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    instance_data_ce0_assign_proc : process(ap_CS_fsm_state3, icmp_ln168_fu_233_p2, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln168_fu_233_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln168_fu_233_p2 = ap_const_lv1_1)))) then 
            instance_data_ce0 <= ap_const_logic_1;
        else 
            instance_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    instance_data_d0_assign_proc : process(key_q0, buffer_r_q0, ap_CS_fsm_state3, icmp_ln168_fu_233_p2, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            instance_data_d0 <= buffer_r_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            instance_data_d0 <= ap_const_lv8_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln168_fu_233_p2 = ap_const_lv1_1))) then 
            instance_data_d0 <= ap_const_lv8_3D;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln168_fu_233_p2 = ap_const_lv1_0))) then 
            instance_data_d0 <= key_q0;
        else 
            instance_data_d0 <= "XXXXXXXX";
        end if; 
    end process;


    instance_data_length_o_assign_proc : process(instance_data_length_i, grp_fu_210_p2, ap_CS_fsm_state3, icmp_ln168_fu_233_p2, ap_CS_fsm_state40, icmp_ln187_fu_366_p2, ap_CS_fsm_state41, add_ln190_fu_383_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) and (icmp_ln187_fu_366_p2 = ap_const_lv1_0))) then 
            instance_data_length_o <= add_ln190_fu_383_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln168_fu_233_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln168_fu_233_p2 = ap_const_lv1_1)))) then 
            instance_data_length_o <= grp_fu_210_p2;
        else 
            instance_data_length_o <= instance_data_length_i;
        end if; 
    end process;


    instance_data_length_o_ap_vld_assign_proc : process(ap_CS_fsm_state3, icmp_ln168_fu_233_p2, ap_CS_fsm_state40, icmp_ln187_fu_366_p2, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (icmp_ln187_fu_366_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln168_fu_233_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln168_fu_233_p2 = ap_const_lv1_1)))) then 
            instance_data_length_o_ap_vld <= ap_const_logic_1;
        else 
            instance_data_length_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    instance_data_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln168_fu_233_p2, ap_CS_fsm_state40, icmp_ln187_fu_366_p2, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or ((ap_const_logic_1 = ap_CS_fsm_state40) and (icmp_ln187_fu_366_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln168_fu_233_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln168_fu_233_p2 = ap_const_lv1_1)))) then 
            instance_data_we0 <= ap_const_logic_1;
        else 
            instance_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    key_address0 <= sext_ln168_fu_222_p1(5 - 1 downto 0);

    key_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            key_ce0 <= ap_const_logic_1;
        else 
            key_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    length_4_fu_372_p2 <= std_logic_vector(unsigned(length_2_reg_196) + unsigned(ap_const_lv32_FFFFFFFF));
    length_fu_355_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(length_1_reg_177));
    mul_ln185_fu_274_p1 <= p_0_reg_166;
    mul_ln185_fu_274_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv65_19999999A) * signed(mul_ln185_fu_274_p1))), 65));
    select_ln185_2_fu_333_p3 <= 
        sub_ln185_2_fu_327_p2 when (tmp_4_reg_445(0) = '1') else 
        sext_ln185_4_fu_317_p1;
    select_ln185_fu_320_p3 <= 
        sext_ln185_3_fu_313_p1 when (tmp_4_reg_445(0) = '1') else 
        sext_ln185_4_fu_317_p1;
        sext_ln168_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_0_i_reg_133),64));

    sext_ln169_fu_239_p0 <= instance_data_length_i;
        sext_ln169_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln169_fu_239_p0),64));

    sext_ln171_fu_244_p0 <= instance_data_length_i;
        sext_ln171_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln171_fu_244_p0),64));

        sext_ln184_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(length_1_reg_177),64));

        sext_ln185_3_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_303_p4),32));

        sext_ln185_4_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_reg_451),32));

    sext_ln188_fu_400_p0 <= instance_data_length_i;
        sext_ln188_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln188_fu_400_p0),64));

        sext_ln190_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(instance_data_length_8_reg_187),64));

    sub_ln185_2_fu_327_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(select_ln185_fu_320_p3));
    sub_ln185_fu_298_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln185_reg_440));
    tmp_5_fu_303_p4 <= sub_ln185_fu_298_p2(64 downto 36);
    trunc_ln184_fu_340_p1 <= grp_fu_264_p2(6 - 1 downto 0);
    zext_ln183_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_length_1_ph_phi_fu_158_p4),32));
    zext_ln184_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln184_fu_344_p2),8));
    zext_ln188_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(length_4_fu_372_p2),64));
end behav;
