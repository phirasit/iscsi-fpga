-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity setup_session is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    header_buffer_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    header_buffer_V_ce0 : OUT STD_LOGIC;
    header_buffer_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    header_buffer_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    header_buffer_V_ce1 : OUT STD_LOGIC;
    header_buffer_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    instance_tsih : OUT STD_LOGIC_VECTOR (0 downto 0);
    instance_tsih_ap_vld : OUT STD_LOGIC;
    instance_data_length : IN STD_LOGIC_VECTOR (31 downto 0);
    instance_data_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    instance_data_ce0 : OUT STD_LOGIC;
    instance_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    instance_discovery : OUT STD_LOGIC_VECTOR (0 downto 0);
    instance_discovery_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (9 downto 0) );
end;


architecture behav of setup_session is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_203 : STD_LOGIC_VECTOR (9 downto 0) := "1000000011";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_str1328_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_str1328_ce0 : STD_LOGIC;
    signal p_str1328_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_str1227_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_str1227_ce0 : STD_LOGIC;
    signal p_str1227_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln5_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_reg_344 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln112_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_reg_354 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_fu_227_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_reg_358 : STD_LOGIC_VECTOR (30 downto 0);
    signal idx_fu_259_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln112_1_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_1_reg_381 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_7_fu_282_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_7_reg_385 : STD_LOGIC_VECTOR (30 downto 0);
    signal idx_1_fu_314_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_0_i_i_reg_120 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln114_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_0_i_i_reg_131 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_i2_reg_143 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln114_1_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_0_i_i3_reg_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_storemerge_phi_fu_170_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge_reg_166 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_p_0_phi_fu_183_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_0_reg_178 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln113_fu_233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln113_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln113_1_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln113_1_fu_293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_194_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln112_fu_218_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln113_2_fu_243_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln113_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln113_fu_253_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln112_1_fu_273_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln113_3_fu_298_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln113_1_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln113_1_fu_308_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component setup_session_p_str1328 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component setup_session_p_str1227 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;



begin
    p_str1328_U : component setup_session_p_str1328
    generic map (
        DataWidth => 7,
        AddressRange => 22,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_str1328_address0,
        ce0 => p_str1328_ce0,
        q0 => p_str1328_q0);

    p_str1227_U : component setup_session_p_str1227
    generic map (
        DataWidth => 7,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_str1227_address0,
        ce0 => p_str1227_ce0,
        q0 => p_str1227_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg(0) <= '0';
                ap_return_preg(1) <= '0';
                ap_return_preg(9) <= '0';
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((icmp_ln5_reg_344 = ap_const_lv1_0) or ((icmp_ln112_reg_354 = ap_const_lv1_1) or ((icmp_ln114_1_fu_322_p2 = ap_const_lv1_1) or (icmp_ln112_1_reg_381 = ap_const_lv1_0)))))) then 
                                        ap_return_preg(1 downto 0) <= ap_phi_mux_p_0_phi_fu_183_p6(1 downto 0);                    ap_return_preg(9) <= ap_phi_mux_p_0_phi_fu_183_p6(9);
                end if; 
            end if;
        end if;
    end process;


    i_0_i_i2_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln112_fu_222_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_i_i2_reg_143 <= ap_const_lv31_0;
            elsif (((icmp_ln112_reg_354 = ap_const_lv1_0) and (icmp_ln112_1_reg_381 = ap_const_lv1_1) and (icmp_ln5_reg_344 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln114_1_fu_322_p2 = ap_const_lv1_0))) then 
                i_0_i_i2_reg_143 <= i_7_reg_385;
            end if; 
        end if;
    end process;

    i_0_i_i_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln114_fu_267_p2 = ap_const_lv1_0))) then 
                i_0_i_i_reg_120 <= i_reg_358;
            elsif (((icmp_ln5_fu_202_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_i_i_reg_120 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    idx_0_i_i3_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln112_fu_222_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                idx_0_i_i3_reg_154 <= ap_const_lv32_0;
            elsif (((icmp_ln112_reg_354 = ap_const_lv1_0) and (icmp_ln112_1_reg_381 = ap_const_lv1_1) and (icmp_ln5_reg_344 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln114_1_fu_322_p2 = ap_const_lv1_0))) then 
                idx_0_i_i3_reg_154 <= idx_1_fu_314_p3;
            end if; 
        end if;
    end process;

    idx_0_i_i_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln114_fu_267_p2 = ap_const_lv1_0))) then 
                idx_0_i_i_reg_131 <= idx_fu_259_p3;
            elsif (((icmp_ln5_fu_202_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                idx_0_i_i_reg_131 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_0_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln112_1_fu_277_p2 = ap_const_lv1_0))) then 
                p_0_reg_178(0) <= '0';
                p_0_reg_178(1) <= '0';
                p_0_reg_178(9) <= '1';
            elsif (((icmp_ln5_fu_202_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_0_reg_178(0) <= '1';
                p_0_reg_178(1) <= '1';
                p_0_reg_178(9) <= '1';
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (((icmp_ln112_reg_354 = ap_const_lv1_1) and (icmp_ln5_reg_344 = ap_const_lv1_1)) or ((icmp_ln114_1_fu_322_p2 = ap_const_lv1_1) and (icmp_ln112_1_reg_381 = ap_const_lv1_1) and (icmp_ln5_reg_344 = ap_const_lv1_1))))) then 
                p_0_reg_178(0) <= '0';
                p_0_reg_178(1) <= '0';
                p_0_reg_178(9) <= '0';
            end if; 
        end if;
    end process;

    storemerge_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln114_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                storemerge_reg_166 <= ap_const_lv1_1;
            elsif (((icmp_ln112_reg_354 = ap_const_lv1_0) and (icmp_ln114_1_fu_322_p2 = ap_const_lv1_1) and (icmp_ln112_1_reg_381 = ap_const_lv1_1) and (icmp_ln5_reg_344 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                storemerge_reg_166 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_7_reg_385 <= i_7_fu_282_p2;
                icmp_ln112_1_reg_381 <= icmp_ln112_1_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_358 <= i_fu_227_p2;
                icmp_ln112_reg_354 <= icmp_ln112_fu_222_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln5_reg_344 <= icmp_ln5_fu_202_p2;
            end if;
        end if;
    end process;
    p_0_reg_178(8 downto 2) <= "0000000";
    ap_return_preg(8 downto 2) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln5_fu_202_p2, icmp_ln5_reg_344, ap_CS_fsm_state2, icmp_ln112_fu_222_p2, icmp_ln112_reg_354, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln112_1_reg_381, ap_CS_fsm_state6, icmp_ln114_fu_267_p2, icmp_ln114_1_fu_322_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln5_fu_202_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln112_fu_222_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln114_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((icmp_ln5_reg_344 = ap_const_lv1_0) or ((icmp_ln112_reg_354 = ap_const_lv1_1) or ((icmp_ln114_1_fu_322_p2 = ap_const_lv1_1) or (icmp_ln112_1_reg_381 = ap_const_lv1_0)))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln113_1_fu_308_p2 <= std_logic_vector(signed(idx_0_i_i3_reg_154) + signed(ap_const_lv32_1));
    add_ln113_fu_253_p2 <= std_logic_vector(signed(idx_0_i_i_reg_131) + signed(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln5_reg_344, icmp_ln112_reg_354, icmp_ln112_1_reg_381, ap_CS_fsm_state6, icmp_ln114_1_fu_322_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and ((icmp_ln5_reg_344 = ap_const_lv1_0) or ((icmp_ln112_reg_354 = ap_const_lv1_1) or ((icmp_ln114_1_fu_322_p2 = ap_const_lv1_1) or (icmp_ln112_1_reg_381 = ap_const_lv1_0))))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_0_phi_fu_183_p6_assign_proc : process(icmp_ln5_reg_344, icmp_ln112_reg_354, icmp_ln112_1_reg_381, ap_CS_fsm_state6, icmp_ln114_1_fu_322_p2, p_0_reg_178)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (((icmp_ln112_reg_354 = ap_const_lv1_1) and (icmp_ln5_reg_344 = ap_const_lv1_1)) or ((icmp_ln114_1_fu_322_p2 = ap_const_lv1_1) and (icmp_ln112_1_reg_381 = ap_const_lv1_1) and (icmp_ln5_reg_344 = ap_const_lv1_1))))) then 
            ap_phi_mux_p_0_phi_fu_183_p6 <= ap_const_lv10_0;
        else 
            ap_phi_mux_p_0_phi_fu_183_p6 <= p_0_reg_178;
        end if; 
    end process;


    ap_phi_mux_storemerge_phi_fu_170_p4_assign_proc : process(icmp_ln5_reg_344, icmp_ln112_reg_354, icmp_ln112_1_reg_381, ap_CS_fsm_state6, icmp_ln114_1_fu_322_p2, storemerge_reg_166)
    begin
        if (((icmp_ln112_reg_354 = ap_const_lv1_0) and (icmp_ln114_1_fu_322_p2 = ap_const_lv1_1) and (icmp_ln112_1_reg_381 = ap_const_lv1_1) and (icmp_ln5_reg_344 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_phi_mux_storemerge_phi_fu_170_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_storemerge_phi_fu_170_p4 <= storemerge_reg_166;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln5_reg_344, icmp_ln112_reg_354, icmp_ln112_1_reg_381, ap_CS_fsm_state6, icmp_ln114_1_fu_322_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((icmp_ln5_reg_344 = ap_const_lv1_0) or ((icmp_ln112_reg_354 = ap_const_lv1_1) or ((icmp_ln114_1_fu_322_p2 = ap_const_lv1_1) or (icmp_ln112_1_reg_381 = ap_const_lv1_0)))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(icmp_ln5_reg_344, icmp_ln112_reg_354, icmp_ln112_1_reg_381, ap_CS_fsm_state6, icmp_ln114_1_fu_322_p2, ap_phi_mux_p_0_phi_fu_183_p6, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((icmp_ln5_reg_344 = ap_const_lv1_0) or ((icmp_ln112_reg_354 = ap_const_lv1_1) or ((icmp_ln114_1_fu_322_p2 = ap_const_lv1_1) or (icmp_ln112_1_reg_381 = ap_const_lv1_0)))))) then 
            ap_return <= ap_phi_mux_p_0_phi_fu_183_p6;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    header_buffer_V_address0 <= ap_const_lv64_E(6 - 1 downto 0);
    header_buffer_V_address1 <= ap_const_lv64_F(6 - 1 downto 0);

    header_buffer_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            header_buffer_V_ce0 <= ap_const_logic_1;
        else 
            header_buffer_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    header_buffer_V_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            header_buffer_V_ce1 <= ap_const_logic_1;
        else 
            header_buffer_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    i_7_fu_282_p2 <= std_logic_vector(unsigned(i_0_i_i2_reg_143) + unsigned(ap_const_lv31_1));
    i_fu_227_p2 <= std_logic_vector(unsigned(i_0_i_i_reg_120) + unsigned(ap_const_lv31_1));
    icmp_ln112_1_fu_277_p2 <= "1" when (signed(zext_ln112_1_fu_273_p1) < signed(instance_data_length)) else "0";
    icmp_ln112_fu_222_p2 <= "1" when (signed(zext_ln112_fu_218_p1) < signed(instance_data_length)) else "0";
    icmp_ln113_1_fu_302_p2 <= "1" when (instance_data_q0 = zext_ln113_3_fu_298_p1) else "0";
    icmp_ln113_fu_247_p2 <= "1" when (instance_data_q0 = zext_ln113_2_fu_243_p1) else "0";
    icmp_ln114_1_fu_322_p2 <= "1" when (idx_1_fu_314_p3 = ap_const_lv32_A) else "0";
    icmp_ln114_fu_267_p2 <= "1" when (idx_fu_259_p3 = ap_const_lv32_15) else "0";
    icmp_ln5_fu_202_p2 <= "1" when (tmp_i_fu_194_p3 = ap_const_lv16_0) else "0";
    idx_1_fu_314_p3 <= 
        add_ln113_1_fu_308_p2 when (icmp_ln113_1_fu_302_p2(0) = '1') else 
        ap_const_lv32_0;
    idx_fu_259_p3 <= 
        add_ln113_fu_253_p2 when (icmp_ln113_fu_247_p2(0) = '1') else 
        ap_const_lv32_0;

    instance_data_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, zext_ln113_fu_233_p1, zext_ln113_1_fu_288_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            instance_data_address0 <= zext_ln113_1_fu_288_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            instance_data_address0 <= zext_ln113_fu_233_p1(13 - 1 downto 0);
        else 
            instance_data_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    instance_data_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            instance_data_ce0 <= ap_const_logic_1;
        else 
            instance_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    instance_discovery <= ap_phi_mux_storemerge_phi_fu_170_p4;

    instance_discovery_ap_vld_assign_proc : process(icmp_ln5_reg_344, icmp_ln112_reg_354, icmp_ln112_1_reg_381, ap_CS_fsm_state6, icmp_ln114_1_fu_322_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (((icmp_ln112_reg_354 = ap_const_lv1_1) and (icmp_ln5_reg_344 = ap_const_lv1_1)) or ((icmp_ln114_1_fu_322_p2 = ap_const_lv1_1) and (icmp_ln112_1_reg_381 = ap_const_lv1_1) and (icmp_ln5_reg_344 = ap_const_lv1_1))))) then 
            instance_discovery_ap_vld <= ap_const_logic_1;
        else 
            instance_discovery_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    instance_tsih <= ap_const_lv1_1;

    instance_tsih_ap_vld_assign_proc : process(icmp_ln5_fu_202_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln5_fu_202_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            instance_tsih_ap_vld <= ap_const_logic_1;
        else 
            instance_tsih_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_str1227_address0 <= sext_ln113_1_fu_293_p1(4 - 1 downto 0);

    p_str1227_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            p_str1227_ce0 <= ap_const_logic_1;
        else 
            p_str1227_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_str1328_address0 <= sext_ln113_fu_238_p1(5 - 1 downto 0);

    p_str1328_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_str1328_ce0 <= ap_const_logic_1;
        else 
            p_str1328_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln113_1_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(idx_0_i_i3_reg_154),64));

        sext_ln113_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(idx_0_i_i_reg_131),64));

    tmp_i_fu_194_p3 <= (header_buffer_V_q0 & header_buffer_V_q1);
    zext_ln112_1_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i2_reg_143),32));
    zext_ln112_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_reg_120),32));
    zext_ln113_1_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i2_reg_143),64));
    zext_ln113_2_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_str1328_q0),8));
    zext_ln113_3_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_str1227_q0),8));
    zext_ln113_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_i_reg_120),64));
end behav;
