-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity write_byte_array_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stream_ap_uint_32_V_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    stream_ap_uint_32_V_V_TVALID : OUT STD_LOGIC;
    stream_ap_uint_32_V_V_TREADY : IN STD_LOGIC;
    data_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    data_ce0 : OUT STD_LOGIC;
    data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    data_ce1 : OUT STD_LOGIC;
    data_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    length_r : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of write_byte_array_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFD : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111101";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal stream_ap_uint_32_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_12_fu_184_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_295 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln22_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_load_3_reg_318 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal select_ln24_fu_218_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln24_reg_323 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln25_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_328 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_257_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln23_fu_197_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln24_fu_213_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln25_fu_236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_fu_252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln22_fu_122_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln22_fu_136_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_fu_142_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_10_fu_128_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln22_1_fu_152_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_11_fu_158_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_fu_114_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln22_fu_168_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal select_ln22_1_fu_176_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal or_ln24_fu_202_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln25_fu_225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln26_fu_241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln26_fu_270_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln25_fu_263_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((stream_ap_uint_32_V_V_TREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_reg_102 <= i_reg_348;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_102 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                data_load_3_reg_318 <= data_q0;
                i_reg_348 <= i_fu_257_p2;
                icmp_ln25_reg_328 <= icmp_ln25_fu_231_p2;
                icmp_ln26_reg_338 <= icmp_ln26_fu_247_p2;
                select_ln24_reg_323 <= select_ln24_fu_218_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_192_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln24_reg_308 <= icmp_ln24_fu_208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    tmp_12_reg_295(31 downto 2) <= tmp_12_fu_184_p3(31 downto 2);
            end if;
        end if;
    end process;
    tmp_12_reg_295(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, stream_ap_uint_32_V_V_TREADY, ap_CS_fsm_state4, ap_CS_fsm_state2, icmp_ln22_fu_192_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln22_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((stream_ap_uint_32_V_V_TREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln22_fu_122_p2 <= std_logic_vector(unsigned(length_r) + unsigned(ap_const_lv32_3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln22_fu_192_p2)
    begin
        if ((((icmp_ln22_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln22_fu_192_p2)
    begin
        if (((icmp_ln22_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    data_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, sext_ln23_fu_197_p1, sext_ln25_fu_236_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_address0 <= sext_ln25_fu_236_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_address0 <= sext_ln23_fu_197_p1(13 - 1 downto 0);
        else 
            data_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    data_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, sext_ln24_fu_213_p1, sext_ln26_fu_252_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_address1 <= sext_ln26_fu_252_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_address1 <= sext_ln24_fu_213_p1(13 - 1 downto 0);
        else 
            data_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    data_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_ce0 <= ap_const_logic_1;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_ce1 <= ap_const_logic_1;
        else 
            data_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_257_p2 <= std_logic_vector(signed(i_0_reg_102) + signed(ap_const_lv32_4));
    icmp_ln22_fu_192_p2 <= "1" when (i_0_reg_102 = tmp_12_reg_295) else "0";
    icmp_ln24_fu_208_p2 <= "1" when (signed(or_ln24_fu_202_p2) < signed(length_r)) else "0";
    icmp_ln25_fu_231_p2 <= "1" when (signed(or_ln25_fu_225_p2) < signed(length_r)) else "0";
    icmp_ln26_fu_247_p2 <= "1" when (signed(or_ln26_fu_241_p2) < signed(length_r)) else "0";
    or_ln24_fu_202_p2 <= (i_0_reg_102 or ap_const_lv32_1);
    or_ln25_fu_225_p2 <= (i_0_reg_102 or ap_const_lv32_2);
    or_ln26_fu_241_p2 <= (i_0_reg_102 or ap_const_lv32_3);
    p_lshr_fu_142_p4 <= sub_ln22_fu_136_p2(31 downto 2);
    select_ln22_1_fu_176_p3 <= 
        ap_const_lv30_0 when (tmp_fu_114_p3(0) = '1') else 
        select_ln22_fu_168_p3;
    select_ln22_fu_168_p3 <= 
        sub_ln22_1_fu_152_p2 when (tmp_10_fu_128_p3(0) = '1') else 
        tmp_11_fu_158_p4;
    select_ln24_fu_218_p3 <= 
        data_q1 when (icmp_ln24_reg_308(0) = '1') else 
        ap_const_lv8_0;
    select_ln25_fu_263_p3 <= 
        data_q0 when (icmp_ln25_reg_328(0) = '1') else 
        ap_const_lv8_0;
    select_ln26_fu_270_p3 <= 
        data_q1 when (icmp_ln26_reg_338(0) = '1') else 
        ap_const_lv8_0;
        sext_ln23_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_0_reg_102),64));

        sext_ln24_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln24_fu_202_p2),64));

        sext_ln25_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln25_fu_225_p2),64));

        sext_ln26_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(or_ln26_fu_241_p2),64));

    stream_ap_uint_32_V_V_TDATA <= (((select_ln26_fu_270_p3 & select_ln25_fu_263_p3) & select_ln24_reg_323) & data_load_3_reg_318);

    stream_ap_uint_32_V_V_TDATA_blk_n_assign_proc : process(stream_ap_uint_32_V_V_TREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            stream_ap_uint_32_V_V_TDATA_blk_n <= stream_ap_uint_32_V_V_TREADY;
        else 
            stream_ap_uint_32_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_ap_uint_32_V_V_TVALID_assign_proc : process(stream_ap_uint_32_V_V_TREADY, ap_CS_fsm_state4)
    begin
        if (((stream_ap_uint_32_V_V_TREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            stream_ap_uint_32_V_V_TVALID <= ap_const_logic_1;
        else 
            stream_ap_uint_32_V_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln22_1_fu_152_p2 <= std_logic_vector(unsigned(ap_const_lv30_0) - unsigned(p_lshr_fu_142_p4));
    sub_ln22_fu_136_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFD) - signed(length_r));
    tmp_10_fu_128_p3 <= add_ln22_fu_122_p2(31 downto 31);
    tmp_11_fu_158_p4 <= add_ln22_fu_122_p2(31 downto 2);
    tmp_12_fu_184_p3 <= (select_ln22_1_fu_176_p3 & ap_const_lv2_0);
    tmp_fu_114_p3 <= length_r(31 downto 31);
end behav;
