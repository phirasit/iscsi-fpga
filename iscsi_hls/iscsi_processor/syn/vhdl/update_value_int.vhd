-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity update_value_int is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    iscsi_connection_parameter_data_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    iscsi_connection_parameter_data_ce0 : OUT STD_LOGIC;
    iscsi_connection_parameter_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    idx : IN STD_LOGIC_VECTOR (31 downto 0);
    val_r_i : IN STD_LOGIC_VECTOR (31 downto 0);
    val_r_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    val_r_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of update_value_int is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_1D0 : STD_LOGIC_VECTOR (8 downto 0) := "111010000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_str12_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_str12_ce0 : STD_LOGIC;
    signal p_str12_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln122_6_fu_135_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln122_6_reg_246 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln122_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_251 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_145_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_255 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln132_fu_166_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln132_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal iscsi_connection_par_21_reg_278 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal nw_val_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_0_i_reg_93 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln123_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_assign_0_in_reg_105 : STD_LOGIC_VECTOR (31 downto 0);
    signal nw_val_0_reg_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln122_fu_126_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln123_fu_156_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln134_fu_172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln134_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln138_fu_189_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln122_5_fu_131_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln123_fu_151_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln138_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln134_fu_198_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln134_5_fu_204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln134_fu_210_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln134_9_fu_219_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln134_5_fu_225_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln134_fu_213_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component update_value_int_p_str12 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;



begin
    p_str12_U : component update_value_int_p_str12
    generic map (
        DataWidth => 7,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_str12_address0,
        ce0 => p_str12_ce0,
        q0 => p_str12_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_i_reg_93_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_fu_161_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_i_reg_93 <= i_reg_255;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_i_reg_93 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    idx_assign_0_in_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_fu_139_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                idx_assign_0_in_reg_105 <= idx;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                idx_assign_0_in_reg_105 <= add_ln132_reg_268;
            end if; 
        end if;
    end process;

    nw_val_0_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_fu_139_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                nw_val_0_reg_114 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                nw_val_0_reg_114 <= nw_val_fu_229_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln132_reg_268 <= add_ln132_fu_166_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_255 <= i_fu_145_p2;
                icmp_ln122_reg_251 <= icmp_ln122_fu_139_p2;
                    zext_ln122_6_reg_246(6 downto 0) <= zext_ln122_6_fu_135_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_reg_251 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                iscsi_connection_par_21_reg_278 <= iscsi_connection_parameter_data_q0;
            end if;
        end if;
    end process;
    zext_ln122_6_reg_246(7) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln122_fu_139_p2, icmp_ln122_reg_251, ap_CS_fsm_state6, ap_CS_fsm_state4, icmp_ln123_fu_161_p2, icmp_ln134_fu_177_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln122_fu_139_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln123_fu_161_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((icmp_ln134_fu_177_p2 = ap_const_lv1_1) or (icmp_ln122_reg_251 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln123_fu_151_p2 <= std_logic_vector(unsigned(zext_ln122_5_fu_131_p1) + unsigned(idx));
    add_ln132_fu_166_p2 <= std_logic_vector(unsigned(idx_assign_0_in_reg_105) + unsigned(ap_const_lv32_1));
    add_ln134_9_fu_219_p2 <= std_logic_vector(signed(ap_const_lv9_1D0) + signed(zext_ln134_fu_210_p1));
    add_ln134_fu_213_p2 <= std_logic_vector(unsigned(shl_ln134_fu_198_p2) + unsigned(shl_ln134_5_fu_204_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln122_reg_251, ap_CS_fsm_state6, icmp_ln134_fu_177_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state6) and ((icmp_ln134_fu_177_p2 = ap_const_lv1_1) or (icmp_ln122_reg_251 = ap_const_lv1_0))) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln122_reg_251, ap_CS_fsm_state6, icmp_ln134_fu_177_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and ((icmp_ln134_fu_177_p2 = ap_const_lv1_1) or (icmp_ln122_reg_251 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_145_p2 <= std_logic_vector(unsigned(i_0_i_reg_93) + unsigned(ap_const_lv5_1));
    icmp_ln122_fu_139_p2 <= "1" when (i_0_i_reg_93 = ap_const_lv5_11) else "0";
    icmp_ln123_fu_161_p2 <= "1" when (iscsi_connection_parameter_data_q0 = zext_ln122_6_reg_246) else "0";
    icmp_ln134_fu_177_p2 <= "1" when (iscsi_connection_parameter_data_q0 = ap_const_lv8_0) else "0";
    icmp_ln138_fu_183_p2 <= "1" when (signed(val_r_i) < signed(nw_val_0_reg_114)) else "0";

    iscsi_connection_parameter_data_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, sext_ln123_fu_156_p1, sext_ln134_fu_172_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            iscsi_connection_parameter_data_address0 <= sext_ln134_fu_172_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            iscsi_connection_parameter_data_address0 <= sext_ln123_fu_156_p1(13 - 1 downto 0);
        else 
            iscsi_connection_parameter_data_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    iscsi_connection_parameter_data_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            iscsi_connection_parameter_data_ce0 <= ap_const_logic_1;
        else 
            iscsi_connection_parameter_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    nw_val_fu_229_p2 <= std_logic_vector(signed(sext_ln134_5_fu_225_p1) + signed(add_ln134_fu_213_p2));
    p_str12_address0 <= zext_ln122_fu_126_p1(5 - 1 downto 0);

    p_str12_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_str12_ce0 <= ap_const_logic_1;
        else 
            p_str12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln138_fu_189_p3 <= 
        val_r_i when (icmp_ln138_fu_183_p2(0) = '1') else 
        nw_val_0_reg_114;
        sext_ln123_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln123_fu_151_p2),64));

        sext_ln134_5_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln134_9_fu_219_p2),32));

        sext_ln134_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln132_fu_166_p2),64));

    shl_ln134_5_fu_204_p2 <= std_logic_vector(shift_left(unsigned(nw_val_0_reg_114),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln134_fu_198_p2 <= std_logic_vector(shift_left(unsigned(nw_val_0_reg_114),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));

    val_r_o_assign_proc : process(val_r_i, icmp_ln122_reg_251, ap_CS_fsm_state6, icmp_ln134_fu_177_p2, select_ln138_fu_189_p3)
    begin
        if (((icmp_ln134_fu_177_p2 = ap_const_lv1_1) and (icmp_ln122_reg_251 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            val_r_o <= select_ln138_fu_189_p3;
        else 
            val_r_o <= val_r_i;
        end if; 
    end process;


    val_r_o_ap_vld_assign_proc : process(icmp_ln122_reg_251, ap_CS_fsm_state6, icmp_ln134_fu_177_p2)
    begin
        if (((icmp_ln134_fu_177_p2 = ap_const_lv1_1) and (icmp_ln122_reg_251 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            val_r_o_ap_vld <= ap_const_logic_1;
        else 
            val_r_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln122_5_fu_131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_93),32));
    zext_ln122_6_fu_135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_str12_q0),8));
    zext_ln122_fu_126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_93),64));
    zext_ln134_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iscsi_connection_par_21_reg_278),9));
end behav;
