// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "write_byte_array_1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic write_byte_array_1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic write_byte_array_1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> write_byte_array_1::ap_ST_fsm_state1 = "1";
const sc_lv<4> write_byte_array_1::ap_ST_fsm_state2 = "10";
const sc_lv<4> write_byte_array_1::ap_ST_fsm_state3 = "100";
const sc_lv<4> write_byte_array_1::ap_ST_fsm_state4 = "1000";
const sc_lv<32> write_byte_array_1::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> write_byte_array_1::ap_const_lv32_3 = "11";
const sc_lv<32> write_byte_array_1::ap_const_lv32_1 = "1";
const sc_lv<32> write_byte_array_1::ap_const_lv32_2 = "10";
const sc_lv<6> write_byte_array_1::ap_const_lv6_0 = "000000";
const sc_lv<6> write_byte_array_1::ap_const_lv6_30 = "110000";
const sc_lv<6> write_byte_array_1::ap_const_lv6_1 = "1";
const sc_lv<6> write_byte_array_1::ap_const_lv6_2 = "10";
const sc_lv<6> write_byte_array_1::ap_const_lv6_3 = "11";
const sc_lv<6> write_byte_array_1::ap_const_lv6_4 = "100";
const sc_lv<1> write_byte_array_1::ap_const_lv1_0 = "0";
const bool write_byte_array_1::ap_const_boolean_1 = true;

write_byte_array_1::write_byte_array_1(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln22_fu_96_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln22_fu_96_p2 );

    SC_METHOD(thread_data_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln23_fu_102_p1 );
    sensitive << ( zext_ln25_fu_124_p1 );

    SC_METHOD(thread_data_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln24_fu_113_p1 );
    sensitive << ( zext_ln26_fu_135_p1 );

    SC_METHOD(thread_data_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_data_ce1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_i_fu_140_p2);
    sensitive << ( i_0_reg_84 );

    SC_METHOD(thread_icmp_ln22_fu_96_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_84 );

    SC_METHOD(thread_or_ln24_fu_107_p2);
    sensitive << ( i_0_reg_84 );

    SC_METHOD(thread_or_ln25_fu_118_p2);
    sensitive << ( i_0_reg_84 );

    SC_METHOD(thread_or_ln26_fu_129_p2);
    sensitive << ( i_0_reg_84 );

    SC_METHOD(thread_stream_ap_uint_32_V_V_TDATA);
    sensitive << ( data_q0 );
    sensitive << ( data_q1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( data_load_4_reg_170 );
    sensitive << ( data_load_reg_175 );

    SC_METHOD(thread_stream_ap_uint_32_V_V_TDATA_blk_n);
    sensitive << ( stream_ap_uint_32_V_V_TREADY );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_stream_ap_uint_32_V_V_TVALID);
    sensitive << ( stream_ap_uint_32_V_V_TREADY );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_zext_ln23_fu_102_p1);
    sensitive << ( i_0_reg_84 );

    SC_METHOD(thread_zext_ln24_fu_113_p1);
    sensitive << ( or_ln24_fu_107_p2 );

    SC_METHOD(thread_zext_ln25_fu_124_p1);
    sensitive << ( or_ln25_fu_118_p2 );

    SC_METHOD(thread_zext_ln26_fu_135_p1);
    sensitive << ( or_ln26_fu_129_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( stream_ap_uint_32_V_V_TREADY );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln22_fu_96_p2 );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "write_byte_array_1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, stream_ap_uint_32_V_V_TDATA, "(port)stream_ap_uint_32_V_V_TDATA");
    sc_trace(mVcdFile, stream_ap_uint_32_V_V_TVALID, "(port)stream_ap_uint_32_V_V_TVALID");
    sc_trace(mVcdFile, stream_ap_uint_32_V_V_TREADY, "(port)stream_ap_uint_32_V_V_TREADY");
    sc_trace(mVcdFile, data_address0, "(port)data_address0");
    sc_trace(mVcdFile, data_ce0, "(port)data_ce0");
    sc_trace(mVcdFile, data_q0, "(port)data_q0");
    sc_trace(mVcdFile, data_address1, "(port)data_address1");
    sc_trace(mVcdFile, data_ce1, "(port)data_ce1");
    sc_trace(mVcdFile, data_q1, "(port)data_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, stream_ap_uint_32_V_V_TDATA_blk_n, "stream_ap_uint_32_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln22_fu_96_p2, "icmp_ln22_fu_96_p2");
    sc_trace(mVcdFile, data_load_4_reg_170, "data_load_4_reg_170");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, data_load_reg_175, "data_load_reg_175");
    sc_trace(mVcdFile, i_fu_140_p2, "i_fu_140_p2");
    sc_trace(mVcdFile, i_reg_190, "i_reg_190");
    sc_trace(mVcdFile, i_0_reg_84, "i_0_reg_84");
    sc_trace(mVcdFile, zext_ln23_fu_102_p1, "zext_ln23_fu_102_p1");
    sc_trace(mVcdFile, zext_ln24_fu_113_p1, "zext_ln24_fu_113_p1");
    sc_trace(mVcdFile, zext_ln25_fu_124_p1, "zext_ln25_fu_124_p1");
    sc_trace(mVcdFile, zext_ln26_fu_135_p1, "zext_ln26_fu_135_p1");
    sc_trace(mVcdFile, or_ln24_fu_107_p2, "or_ln24_fu_107_p2");
    sc_trace(mVcdFile, or_ln25_fu_118_p2, "or_ln25_fu_118_p2");
    sc_trace(mVcdFile, or_ln26_fu_129_p2, "or_ln26_fu_129_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

write_byte_array_1::~write_byte_array_1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void write_byte_array_1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(stream_ap_uint_32_V_V_TREADY.read(), ap_const_logic_1))) {
        i_0_reg_84 = i_reg_190.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_84 = ap_const_lv6_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        data_load_4_reg_170 = data_q0.read();
        data_load_reg_175 = data_q1.read();
        i_reg_190 = i_fu_140_p2.read();
    }
}

void write_byte_array_1::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void write_byte_array_1::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void write_byte_array_1::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void write_byte_array_1::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void write_byte_array_1::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln22_fu_96_p2.read(), ap_const_lv1_0)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void write_byte_array_1::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void write_byte_array_1::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln22_fu_96_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void write_byte_array_1::thread_data_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        data_address0 =  (sc_lv<6>) (zext_ln25_fu_124_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        data_address0 =  (sc_lv<6>) (zext_ln23_fu_102_p1.read());
    } else {
        data_address0 = "XXXXXX";
    }
}

void write_byte_array_1::thread_data_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        data_address1 =  (sc_lv<6>) (zext_ln26_fu_135_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        data_address1 =  (sc_lv<6>) (zext_ln24_fu_113_p1.read());
    } else {
        data_address1 = "XXXXXX";
    }
}

void write_byte_array_1::thread_data_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        data_ce0 = ap_const_logic_1;
    } else {
        data_ce0 = ap_const_logic_0;
    }
}

void write_byte_array_1::thread_data_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        data_ce1 = ap_const_logic_1;
    } else {
        data_ce1 = ap_const_logic_0;
    }
}

void write_byte_array_1::thread_i_fu_140_p2() {
    i_fu_140_p2 = (!i_0_reg_84.read().is_01() || !ap_const_lv6_4.is_01())? sc_lv<6>(): (sc_biguint<6>(i_0_reg_84.read()) + sc_biguint<6>(ap_const_lv6_4));
}

void write_byte_array_1::thread_icmp_ln22_fu_96_p2() {
    icmp_ln22_fu_96_p2 = (!i_0_reg_84.read().is_01() || !ap_const_lv6_30.is_01())? sc_lv<1>(): (sc_biguint<6>(i_0_reg_84.read()) < sc_biguint<6>(ap_const_lv6_30));
}

void write_byte_array_1::thread_or_ln24_fu_107_p2() {
    or_ln24_fu_107_p2 = (i_0_reg_84.read() | ap_const_lv6_1);
}

void write_byte_array_1::thread_or_ln25_fu_118_p2() {
    or_ln25_fu_118_p2 = (i_0_reg_84.read() | ap_const_lv6_2);
}

void write_byte_array_1::thread_or_ln26_fu_129_p2() {
    or_ln26_fu_129_p2 = (i_0_reg_84.read() | ap_const_lv6_3);
}

void write_byte_array_1::thread_stream_ap_uint_32_V_V_TDATA() {
    stream_ap_uint_32_V_V_TDATA = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(data_q1.read(), data_q0.read()), data_load_reg_175.read()), data_load_4_reg_170.read());
}

void write_byte_array_1::thread_stream_ap_uint_32_V_V_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        stream_ap_uint_32_V_V_TDATA_blk_n = stream_ap_uint_32_V_V_TREADY.read();
    } else {
        stream_ap_uint_32_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void write_byte_array_1::thread_stream_ap_uint_32_V_V_TVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(stream_ap_uint_32_V_V_TREADY.read(), ap_const_logic_1))) {
        stream_ap_uint_32_V_V_TVALID = ap_const_logic_1;
    } else {
        stream_ap_uint_32_V_V_TVALID = ap_const_logic_0;
    }
}

void write_byte_array_1::thread_zext_ln23_fu_102_p1() {
    zext_ln23_fu_102_p1 = esl_zext<64,6>(i_0_reg_84.read());
}

void write_byte_array_1::thread_zext_ln24_fu_113_p1() {
    zext_ln24_fu_113_p1 = esl_zext<64,6>(or_ln24_fu_107_p2.read());
}

void write_byte_array_1::thread_zext_ln25_fu_124_p1() {
    zext_ln25_fu_124_p1 = esl_zext<64,6>(or_ln25_fu_118_p2.read());
}

void write_byte_array_1::thread_zext_ln26_fu_135_p1() {
    zext_ln26_fu_135_p1 = esl_zext<64,6>(or_ln26_fu_129_p2.read());
}

void write_byte_array_1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln22_fu_96_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(stream_ap_uint_32_V_V_TREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

}

