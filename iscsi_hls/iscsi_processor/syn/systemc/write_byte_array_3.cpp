// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "write_byte_array_3.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic write_byte_array_3::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic write_byte_array_3::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> write_byte_array_3::ap_ST_fsm_state1 = "1";
const sc_lv<4> write_byte_array_3::ap_ST_fsm_state2 = "10";
const sc_lv<4> write_byte_array_3::ap_ST_fsm_state3 = "100";
const sc_lv<4> write_byte_array_3::ap_ST_fsm_state4 = "1000";
const sc_lv<32> write_byte_array_3::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> write_byte_array_3::ap_const_lv32_3 = "11";
const sc_lv<32> write_byte_array_3::ap_const_lv32_1 = "1";
const sc_lv<1> write_byte_array_3::ap_const_lv1_0 = "0";
const sc_lv<32> write_byte_array_3::ap_const_lv32_2 = "10";
const sc_lv<32> write_byte_array_3::ap_const_lv32_1F = "11111";
const sc_lv<32> write_byte_array_3::ap_const_lv32_FFFFFFFD = "11111111111111111111111111111101";
const sc_lv<30> write_byte_array_3::ap_const_lv30_0 = "000000000000000000000000000000";
const sc_lv<2> write_byte_array_3::ap_const_lv2_0 = "00";
const sc_lv<8> write_byte_array_3::ap_const_lv8_0 = "00000000";
const sc_lv<32> write_byte_array_3::ap_const_lv32_4 = "100";
const sc_lv<1> write_byte_array_3::ap_const_lv1_1 = "1";
const bool write_byte_array_3::ap_const_boolean_1 = true;

write_byte_array_3::write_byte_array_3(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln22_fu_122_p2);
    sensitive << ( length_r );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln22_fu_192_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln22_fu_192_p2 );

    SC_METHOD(thread_data_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( sext_ln23_fu_197_p1 );
    sensitive << ( sext_ln25_fu_236_p1 );

    SC_METHOD(thread_data_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( sext_ln24_fu_213_p1 );
    sensitive << ( sext_ln26_fu_252_p1 );

    SC_METHOD(thread_data_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_data_ce1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_i_fu_257_p2);
    sensitive << ( i_0_reg_102 );

    SC_METHOD(thread_icmp_ln22_fu_192_p2);
    sensitive << ( tmp_12_reg_295 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_102 );

    SC_METHOD(thread_icmp_ln24_fu_208_p2);
    sensitive << ( length_r );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln22_fu_192_p2 );
    sensitive << ( or_ln24_fu_202_p2 );

    SC_METHOD(thread_icmp_ln25_fu_231_p2);
    sensitive << ( length_r );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( or_ln25_fu_225_p2 );

    SC_METHOD(thread_icmp_ln26_fu_247_p2);
    sensitive << ( length_r );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( or_ln26_fu_241_p2 );

    SC_METHOD(thread_or_ln24_fu_202_p2);
    sensitive << ( i_0_reg_102 );

    SC_METHOD(thread_or_ln25_fu_225_p2);
    sensitive << ( i_0_reg_102 );

    SC_METHOD(thread_or_ln26_fu_241_p2);
    sensitive << ( i_0_reg_102 );

    SC_METHOD(thread_p_lshr_fu_142_p4);
    sensitive << ( sub_ln22_fu_136_p2 );

    SC_METHOD(thread_select_ln22_1_fu_176_p3);
    sensitive << ( tmp_fu_114_p3 );
    sensitive << ( select_ln22_fu_168_p3 );

    SC_METHOD(thread_select_ln22_fu_168_p3);
    sensitive << ( tmp_10_fu_128_p3 );
    sensitive << ( sub_ln22_1_fu_152_p2 );
    sensitive << ( tmp_11_fu_158_p4 );

    SC_METHOD(thread_select_ln24_fu_218_p3);
    sensitive << ( data_q1 );
    sensitive << ( icmp_ln24_reg_308 );

    SC_METHOD(thread_select_ln25_fu_263_p3);
    sensitive << ( data_q0 );
    sensitive << ( icmp_ln25_reg_328 );

    SC_METHOD(thread_select_ln26_fu_270_p3);
    sensitive << ( data_q1 );
    sensitive << ( icmp_ln26_reg_338 );

    SC_METHOD(thread_sext_ln23_fu_197_p1);
    sensitive << ( i_0_reg_102 );

    SC_METHOD(thread_sext_ln24_fu_213_p1);
    sensitive << ( or_ln24_fu_202_p2 );

    SC_METHOD(thread_sext_ln25_fu_236_p1);
    sensitive << ( or_ln25_fu_225_p2 );

    SC_METHOD(thread_sext_ln26_fu_252_p1);
    sensitive << ( or_ln26_fu_241_p2 );

    SC_METHOD(thread_stream_ap_uint_32_V_V_TDATA);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( data_load_3_reg_318 );
    sensitive << ( select_ln24_reg_323 );
    sensitive << ( select_ln26_fu_270_p3 );
    sensitive << ( select_ln25_fu_263_p3 );

    SC_METHOD(thread_stream_ap_uint_32_V_V_TDATA_blk_n);
    sensitive << ( stream_ap_uint_32_V_V_TREADY );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_stream_ap_uint_32_V_V_TVALID);
    sensitive << ( stream_ap_uint_32_V_V_TREADY );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_sub_ln22_1_fu_152_p2);
    sensitive << ( p_lshr_fu_142_p4 );

    SC_METHOD(thread_sub_ln22_fu_136_p2);
    sensitive << ( length_r );

    SC_METHOD(thread_tmp_10_fu_128_p3);
    sensitive << ( add_ln22_fu_122_p2 );

    SC_METHOD(thread_tmp_11_fu_158_p4);
    sensitive << ( add_ln22_fu_122_p2 );

    SC_METHOD(thread_tmp_12_fu_184_p3);
    sensitive << ( select_ln22_1_fu_176_p3 );

    SC_METHOD(thread_tmp_fu_114_p3);
    sensitive << ( length_r );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( stream_ap_uint_32_V_V_TREADY );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln22_fu_192_p2 );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "write_byte_array_3_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, stream_ap_uint_32_V_V_TDATA, "(port)stream_ap_uint_32_V_V_TDATA");
    sc_trace(mVcdFile, stream_ap_uint_32_V_V_TVALID, "(port)stream_ap_uint_32_V_V_TVALID");
    sc_trace(mVcdFile, stream_ap_uint_32_V_V_TREADY, "(port)stream_ap_uint_32_V_V_TREADY");
    sc_trace(mVcdFile, data_address0, "(port)data_address0");
    sc_trace(mVcdFile, data_ce0, "(port)data_ce0");
    sc_trace(mVcdFile, data_q0, "(port)data_q0");
    sc_trace(mVcdFile, data_address1, "(port)data_address1");
    sc_trace(mVcdFile, data_ce1, "(port)data_ce1");
    sc_trace(mVcdFile, data_q1, "(port)data_q1");
    sc_trace(mVcdFile, length_r, "(port)length_r");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, stream_ap_uint_32_V_V_TDATA_blk_n, "stream_ap_uint_32_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_12_fu_184_p3, "tmp_12_fu_184_p3");
    sc_trace(mVcdFile, tmp_12_reg_295, "tmp_12_reg_295");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln22_fu_192_p2, "icmp_ln22_fu_192_p2");
    sc_trace(mVcdFile, icmp_ln24_fu_208_p2, "icmp_ln24_fu_208_p2");
    sc_trace(mVcdFile, icmp_ln24_reg_308, "icmp_ln24_reg_308");
    sc_trace(mVcdFile, data_load_3_reg_318, "data_load_3_reg_318");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, select_ln24_fu_218_p3, "select_ln24_fu_218_p3");
    sc_trace(mVcdFile, select_ln24_reg_323, "select_ln24_reg_323");
    sc_trace(mVcdFile, icmp_ln25_fu_231_p2, "icmp_ln25_fu_231_p2");
    sc_trace(mVcdFile, icmp_ln25_reg_328, "icmp_ln25_reg_328");
    sc_trace(mVcdFile, icmp_ln26_fu_247_p2, "icmp_ln26_fu_247_p2");
    sc_trace(mVcdFile, icmp_ln26_reg_338, "icmp_ln26_reg_338");
    sc_trace(mVcdFile, i_fu_257_p2, "i_fu_257_p2");
    sc_trace(mVcdFile, i_reg_348, "i_reg_348");
    sc_trace(mVcdFile, i_0_reg_102, "i_0_reg_102");
    sc_trace(mVcdFile, sext_ln23_fu_197_p1, "sext_ln23_fu_197_p1");
    sc_trace(mVcdFile, sext_ln24_fu_213_p1, "sext_ln24_fu_213_p1");
    sc_trace(mVcdFile, sext_ln25_fu_236_p1, "sext_ln25_fu_236_p1");
    sc_trace(mVcdFile, sext_ln26_fu_252_p1, "sext_ln26_fu_252_p1");
    sc_trace(mVcdFile, add_ln22_fu_122_p2, "add_ln22_fu_122_p2");
    sc_trace(mVcdFile, sub_ln22_fu_136_p2, "sub_ln22_fu_136_p2");
    sc_trace(mVcdFile, p_lshr_fu_142_p4, "p_lshr_fu_142_p4");
    sc_trace(mVcdFile, tmp_10_fu_128_p3, "tmp_10_fu_128_p3");
    sc_trace(mVcdFile, sub_ln22_1_fu_152_p2, "sub_ln22_1_fu_152_p2");
    sc_trace(mVcdFile, tmp_11_fu_158_p4, "tmp_11_fu_158_p4");
    sc_trace(mVcdFile, tmp_fu_114_p3, "tmp_fu_114_p3");
    sc_trace(mVcdFile, select_ln22_fu_168_p3, "select_ln22_fu_168_p3");
    sc_trace(mVcdFile, select_ln22_1_fu_176_p3, "select_ln22_1_fu_176_p3");
    sc_trace(mVcdFile, or_ln24_fu_202_p2, "or_ln24_fu_202_p2");
    sc_trace(mVcdFile, or_ln25_fu_225_p2, "or_ln25_fu_225_p2");
    sc_trace(mVcdFile, or_ln26_fu_241_p2, "or_ln26_fu_241_p2");
    sc_trace(mVcdFile, select_ln26_fu_270_p3, "select_ln26_fu_270_p3");
    sc_trace(mVcdFile, select_ln25_fu_263_p3, "select_ln25_fu_263_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

write_byte_array_3::~write_byte_array_3() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void write_byte_array_3::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(stream_ap_uint_32_V_V_TREADY.read(), ap_const_logic_1))) {
        i_0_reg_102 = i_reg_348.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_102 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        data_load_3_reg_318 = data_q0.read();
        i_reg_348 = i_fu_257_p2.read();
        icmp_ln25_reg_328 = icmp_ln25_fu_231_p2.read();
        icmp_ln26_reg_338 = icmp_ln26_fu_247_p2.read();
        select_ln24_reg_323 = select_ln24_fu_218_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln22_fu_192_p2.read(), ap_const_lv1_0))) {
        icmp_ln24_reg_308 = icmp_ln24_fu_208_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        tmp_12_reg_295 = tmp_12_fu_184_p3.read();
    }
}

void write_byte_array_3::thread_add_ln22_fu_122_p2() {
    add_ln22_fu_122_p2 = (!length_r.read().is_01() || !ap_const_lv32_3.is_01())? sc_lv<32>(): (sc_biguint<32>(length_r.read()) + sc_biguint<32>(ap_const_lv32_3));
}

void write_byte_array_3::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void write_byte_array_3::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void write_byte_array_3::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void write_byte_array_3::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void write_byte_array_3::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln22_fu_192_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void write_byte_array_3::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void write_byte_array_3::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln22_fu_192_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void write_byte_array_3::thread_data_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        data_address0 =  (sc_lv<13>) (sext_ln25_fu_236_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        data_address0 =  (sc_lv<13>) (sext_ln23_fu_197_p1.read());
    } else {
        data_address0 = "XXXXXXXXXXXXX";
    }
}

void write_byte_array_3::thread_data_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        data_address1 =  (sc_lv<13>) (sext_ln26_fu_252_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        data_address1 =  (sc_lv<13>) (sext_ln24_fu_213_p1.read());
    } else {
        data_address1 = "XXXXXXXXXXXXX";
    }
}

void write_byte_array_3::thread_data_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        data_ce0 = ap_const_logic_1;
    } else {
        data_ce0 = ap_const_logic_0;
    }
}

void write_byte_array_3::thread_data_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        data_ce1 = ap_const_logic_1;
    } else {
        data_ce1 = ap_const_logic_0;
    }
}

void write_byte_array_3::thread_i_fu_257_p2() {
    i_fu_257_p2 = (!i_0_reg_102.read().is_01() || !ap_const_lv32_4.is_01())? sc_lv<32>(): (sc_bigint<32>(i_0_reg_102.read()) + sc_biguint<32>(ap_const_lv32_4));
}

void write_byte_array_3::thread_icmp_ln22_fu_192_p2() {
    icmp_ln22_fu_192_p2 = (!i_0_reg_102.read().is_01() || !tmp_12_reg_295.read().is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_102.read() == tmp_12_reg_295.read());
}

void write_byte_array_3::thread_icmp_ln24_fu_208_p2() {
    icmp_ln24_fu_208_p2 = (!or_ln24_fu_202_p2.read().is_01() || !length_r.read().is_01())? sc_lv<1>(): (sc_bigint<32>(or_ln24_fu_202_p2.read()) < sc_bigint<32>(length_r.read()));
}

void write_byte_array_3::thread_icmp_ln25_fu_231_p2() {
    icmp_ln25_fu_231_p2 = (!or_ln25_fu_225_p2.read().is_01() || !length_r.read().is_01())? sc_lv<1>(): (sc_bigint<32>(or_ln25_fu_225_p2.read()) < sc_bigint<32>(length_r.read()));
}

void write_byte_array_3::thread_icmp_ln26_fu_247_p2() {
    icmp_ln26_fu_247_p2 = (!or_ln26_fu_241_p2.read().is_01() || !length_r.read().is_01())? sc_lv<1>(): (sc_bigint<32>(or_ln26_fu_241_p2.read()) < sc_bigint<32>(length_r.read()));
}

void write_byte_array_3::thread_or_ln24_fu_202_p2() {
    or_ln24_fu_202_p2 = (i_0_reg_102.read() | ap_const_lv32_1);
}

void write_byte_array_3::thread_or_ln25_fu_225_p2() {
    or_ln25_fu_225_p2 = (i_0_reg_102.read() | ap_const_lv32_2);
}

void write_byte_array_3::thread_or_ln26_fu_241_p2() {
    or_ln26_fu_241_p2 = (i_0_reg_102.read() | ap_const_lv32_3);
}

void write_byte_array_3::thread_p_lshr_fu_142_p4() {
    p_lshr_fu_142_p4 = sub_ln22_fu_136_p2.read().range(31, 2);
}

void write_byte_array_3::thread_select_ln22_1_fu_176_p3() {
    select_ln22_1_fu_176_p3 = (!tmp_fu_114_p3.read()[0].is_01())? sc_lv<30>(): ((tmp_fu_114_p3.read()[0].to_bool())? ap_const_lv30_0: select_ln22_fu_168_p3.read());
}

void write_byte_array_3::thread_select_ln22_fu_168_p3() {
    select_ln22_fu_168_p3 = (!tmp_10_fu_128_p3.read()[0].is_01())? sc_lv<30>(): ((tmp_10_fu_128_p3.read()[0].to_bool())? sub_ln22_1_fu_152_p2.read(): tmp_11_fu_158_p4.read());
}

void write_byte_array_3::thread_select_ln24_fu_218_p3() {
    select_ln24_fu_218_p3 = (!icmp_ln24_reg_308.read()[0].is_01())? sc_lv<8>(): ((icmp_ln24_reg_308.read()[0].to_bool())? data_q1.read(): ap_const_lv8_0);
}

void write_byte_array_3::thread_select_ln25_fu_263_p3() {
    select_ln25_fu_263_p3 = (!icmp_ln25_reg_328.read()[0].is_01())? sc_lv<8>(): ((icmp_ln25_reg_328.read()[0].to_bool())? data_q0.read(): ap_const_lv8_0);
}

void write_byte_array_3::thread_select_ln26_fu_270_p3() {
    select_ln26_fu_270_p3 = (!icmp_ln26_reg_338.read()[0].is_01())? sc_lv<8>(): ((icmp_ln26_reg_338.read()[0].to_bool())? data_q1.read(): ap_const_lv8_0);
}

void write_byte_array_3::thread_sext_ln23_fu_197_p1() {
    sext_ln23_fu_197_p1 = esl_sext<64,32>(i_0_reg_102.read());
}

void write_byte_array_3::thread_sext_ln24_fu_213_p1() {
    sext_ln24_fu_213_p1 = esl_sext<64,32>(or_ln24_fu_202_p2.read());
}

void write_byte_array_3::thread_sext_ln25_fu_236_p1() {
    sext_ln25_fu_236_p1 = esl_sext<64,32>(or_ln25_fu_225_p2.read());
}

void write_byte_array_3::thread_sext_ln26_fu_252_p1() {
    sext_ln26_fu_252_p1 = esl_sext<64,32>(or_ln26_fu_241_p2.read());
}

void write_byte_array_3::thread_stream_ap_uint_32_V_V_TDATA() {
    stream_ap_uint_32_V_V_TDATA = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(select_ln26_fu_270_p3.read(), select_ln25_fu_263_p3.read()), select_ln24_reg_323.read()), data_load_3_reg_318.read());
}

void write_byte_array_3::thread_stream_ap_uint_32_V_V_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        stream_ap_uint_32_V_V_TDATA_blk_n = stream_ap_uint_32_V_V_TREADY.read();
    } else {
        stream_ap_uint_32_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void write_byte_array_3::thread_stream_ap_uint_32_V_V_TVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(stream_ap_uint_32_V_V_TREADY.read(), ap_const_logic_1))) {
        stream_ap_uint_32_V_V_TVALID = ap_const_logic_1;
    } else {
        stream_ap_uint_32_V_V_TVALID = ap_const_logic_0;
    }
}

void write_byte_array_3::thread_sub_ln22_1_fu_152_p2() {
    sub_ln22_1_fu_152_p2 = (!ap_const_lv30_0.is_01() || !p_lshr_fu_142_p4.read().is_01())? sc_lv<30>(): (sc_biguint<30>(ap_const_lv30_0) - sc_biguint<30>(p_lshr_fu_142_p4.read()));
}

void write_byte_array_3::thread_sub_ln22_fu_136_p2() {
    sub_ln22_fu_136_p2 = (!ap_const_lv32_FFFFFFFD.is_01() || !length_r.read().is_01())? sc_lv<32>(): (sc_bigint<32>(ap_const_lv32_FFFFFFFD) - sc_biguint<32>(length_r.read()));
}

void write_byte_array_3::thread_tmp_10_fu_128_p3() {
    tmp_10_fu_128_p3 = add_ln22_fu_122_p2.read().range(31, 31);
}

void write_byte_array_3::thread_tmp_11_fu_158_p4() {
    tmp_11_fu_158_p4 = add_ln22_fu_122_p2.read().range(31, 2);
}

void write_byte_array_3::thread_tmp_12_fu_184_p3() {
    tmp_12_fu_184_p3 = esl_concat<30,2>(select_ln22_1_fu_176_p3.read(), ap_const_lv2_0);
}

void write_byte_array_3::thread_tmp_fu_114_p3() {
    tmp_fu_114_p3 = length_r.read().range(31, 31);
}

void write_byte_array_3::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln22_fu_192_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(stream_ap_uint_32_V_V_TREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

}

