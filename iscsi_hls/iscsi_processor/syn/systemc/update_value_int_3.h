// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _update_value_int_3_HH_
#define _update_value_int_3_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct update_value_int_3 : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<13> > iscsi_connection_parameter_data_address0;
    sc_out< sc_logic > iscsi_connection_parameter_data_ce0;
    sc_in< sc_lv<8> > iscsi_connection_parameter_data_q0;
    sc_in< sc_lv<32> > idx;
    sc_out< sc_lv<4> > key_address0;
    sc_out< sc_logic > key_ce0;
    sc_in< sc_lv<8> > key_q0;
    sc_in< sc_lv<32> > val_read;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    update_value_int_3(sc_module_name name);
    SC_HAS_PROCESS(update_value_int_3);

    ~update_value_int_3();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > key_load_reg_234;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > i_fu_121_p2;
    sc_signal< sc_lv<32> > i_reg_242;
    sc_signal< sc_lv<1> > icmp_ln122_fu_115_p2;
    sc_signal< sc_lv<32> > add_ln132_fu_150_p2;
    sc_signal< sc_lv<32> > add_ln132_reg_255;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<8> > iscsi_connection_par_12_reg_265;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<32> > select_ln138_fu_172_p3;
    sc_signal< sc_lv<1> > icmp_ln134_fu_161_p2;
    sc_signal< sc_lv<32> > nw_val_fu_210_p2;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<32> > i_0_i_reg_68;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > icmp_ln123_fu_144_p2;
    sc_signal< sc_lv<32> > idx_assign_0_in_reg_80;
    sc_signal< sc_lv<32> > nw_val_0_reg_89;
    sc_signal< sc_lv<32> > val_0_reg_101;
    sc_signal< sc_lv<64> > sext_ln122_fu_110_p1;
    sc_signal< sc_lv<64> > sext_ln123_fu_132_p1;
    sc_signal< sc_lv<64> > sext_ln134_fu_156_p1;
    sc_signal< sc_lv<8> > icmp_ln122_fu_115_p0;
    sc_signal< sc_lv<32> > add_ln123_fu_127_p2;
    sc_signal< sc_lv<9> > zext_ln123_fu_137_p1;
    sc_signal< sc_lv<9> > sext_ln123_1_fu_141_p1;
    sc_signal< sc_lv<1> > icmp_ln138_fu_167_p2;
    sc_signal< sc_lv<32> > shl_ln134_fu_179_p2;
    sc_signal< sc_lv<32> > shl_ln134_2_fu_185_p2;
    sc_signal< sc_lv<9> > zext_ln134_fu_191_p1;
    sc_signal< sc_lv<9> > add_ln134_3_fu_200_p2;
    sc_signal< sc_lv<32> > sext_ln134_2_fu_206_p1;
    sc_signal< sc_lv<32> > add_ln134_fu_194_p2;
    sc_signal< sc_lv<32> > ap_return_preg;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_state3;
    static const sc_lv<8> ap_ST_fsm_state4;
    static const sc_lv<8> ap_ST_fsm_state5;
    static const sc_lv<8> ap_ST_fsm_state6;
    static const sc_lv<8> ap_ST_fsm_state7;
    static const sc_lv<8> ap_ST_fsm_state8;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<9> ap_const_lv9_1D0;
    static const sc_lv<32> ap_const_lv32_7;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln123_fu_127_p2();
    void thread_add_ln132_fu_150_p2();
    void thread_add_ln134_3_fu_200_p2();
    void thread_add_ln134_fu_194_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_i_fu_121_p2();
    void thread_icmp_ln122_fu_115_p0();
    void thread_icmp_ln122_fu_115_p2();
    void thread_icmp_ln123_fu_144_p2();
    void thread_icmp_ln134_fu_161_p2();
    void thread_icmp_ln138_fu_167_p2();
    void thread_iscsi_connection_parameter_data_address0();
    void thread_iscsi_connection_parameter_data_ce0();
    void thread_key_address0();
    void thread_key_ce0();
    void thread_nw_val_fu_210_p2();
    void thread_select_ln138_fu_172_p3();
    void thread_sext_ln122_fu_110_p1();
    void thread_sext_ln123_1_fu_141_p1();
    void thread_sext_ln123_fu_132_p1();
    void thread_sext_ln134_2_fu_206_p1();
    void thread_sext_ln134_fu_156_p1();
    void thread_shl_ln134_2_fu_185_p2();
    void thread_shl_ln134_fu_179_p2();
    void thread_zext_ln123_fu_137_p1();
    void thread_zext_ln134_fu_191_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
