// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _read_byte_array_1_HH_
#define _read_byte_array_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct read_byte_array_1 : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > stream_ap_uint_32_V_V_TDATA;
    sc_in< sc_logic > stream_ap_uint_32_V_V_TVALID;
    sc_out< sc_logic > stream_ap_uint_32_V_V_TREADY;
    sc_out< sc_lv<13> > data_address0;
    sc_out< sc_logic > data_ce0;
    sc_out< sc_logic > data_we0;
    sc_out< sc_lv<8> > data_d0;
    sc_out< sc_lv<13> > data_address1;
    sc_out< sc_logic > data_ce1;
    sc_out< sc_logic > data_we1;
    sc_out< sc_lv<8> > data_d1;
    sc_in< sc_lv<24> > length_r;


    // Module declarations
    read_byte_array_1(sc_module_name name);
    SC_HAS_PROCESS(read_byte_array_1);

    ~read_byte_array_1();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > stream_ap_uint_32_V_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln34_fu_153_p2;
    sc_signal< sc_lv<32> > zext_ln34_1_fu_149_p1;
    sc_signal< sc_lv<32> > zext_ln34_1_reg_238;
    sc_signal< sc_lv<8> > p_Result_1_reg_246;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<8> > p_Result_2_reg_251;
    sc_signal< sc_lv<32> > i_fu_232_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > i_0_reg_109;
    sc_signal< sc_lv<64> > sext_ln36_fu_163_p1;
    sc_signal< sc_lv<64> > sext_ln37_fu_185_p1;
    sc_signal< sc_lv<64> > sext_ln38_fu_216_p1;
    sc_signal< sc_lv<64> > sext_ln39_fu_227_p1;
    sc_signal< sc_lv<8> > trunc_ln681_fu_158_p1;
    sc_signal< sc_lv<25> > zext_ln34_fu_121_p1;
    sc_signal< sc_lv<25> > add_ln34_fu_125_p2;
    sc_signal< sc_lv<23> > tmp_fu_131_p4;
    sc_signal< sc_lv<25> > tmp_13_fu_141_p3;
    sc_signal< sc_lv<32> > or_ln37_fu_179_p2;
    sc_signal< sc_lv<32> > or_ln38_fu_210_p2;
    sc_signal< sc_lv<32> > or_ln39_fu_221_p2;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<25> ap_const_lv25_3;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln34_fu_125_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_data_address0();
    void thread_data_address1();
    void thread_data_ce0();
    void thread_data_ce1();
    void thread_data_d0();
    void thread_data_d1();
    void thread_data_we0();
    void thread_data_we1();
    void thread_i_fu_232_p2();
    void thread_icmp_ln34_fu_153_p2();
    void thread_or_ln37_fu_179_p2();
    void thread_or_ln38_fu_210_p2();
    void thread_or_ln39_fu_221_p2();
    void thread_sext_ln36_fu_163_p1();
    void thread_sext_ln37_fu_185_p1();
    void thread_sext_ln38_fu_216_p1();
    void thread_sext_ln39_fu_227_p1();
    void thread_stream_ap_uint_32_V_V_TDATA_blk_n();
    void thread_stream_ap_uint_32_V_V_TREADY();
    void thread_tmp_13_fu_141_p3();
    void thread_tmp_fu_131_p4();
    void thread_trunc_ln681_fu_158_p1();
    void thread_zext_ln34_1_fu_149_p1();
    void thread_zext_ln34_fu_121_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
