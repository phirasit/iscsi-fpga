// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "read_byte_array.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic read_byte_array::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic read_byte_array::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> read_byte_array::ap_ST_fsm_state1 = "1";
const sc_lv<3> read_byte_array::ap_ST_fsm_state2 = "10";
const sc_lv<3> read_byte_array::ap_ST_fsm_state3 = "100";
const sc_lv<32> read_byte_array::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> read_byte_array::ap_const_lv32_1 = "1";
const sc_lv<1> read_byte_array::ap_const_lv1_1 = "1";
const sc_lv<32> read_byte_array::ap_const_lv32_2 = "10";
const sc_lv<6> read_byte_array::ap_const_lv6_0 = "000000";
const sc_lv<6> read_byte_array::ap_const_lv6_30 = "110000";
const sc_lv<32> read_byte_array::ap_const_lv32_8 = "1000";
const sc_lv<32> read_byte_array::ap_const_lv32_F = "1111";
const sc_lv<6> read_byte_array::ap_const_lv6_1 = "1";
const sc_lv<32> read_byte_array::ap_const_lv32_10 = "10000";
const sc_lv<32> read_byte_array::ap_const_lv32_17 = "10111";
const sc_lv<32> read_byte_array::ap_const_lv32_18 = "11000";
const sc_lv<32> read_byte_array::ap_const_lv32_1F = "11111";
const sc_lv<6> read_byte_array::ap_const_lv6_2 = "10";
const sc_lv<6> read_byte_array::ap_const_lv6_3 = "11";
const sc_lv<6> read_byte_array::ap_const_lv6_4 = "100";
const sc_lv<1> read_byte_array::ap_const_lv1_0 = "0";
const bool read_byte_array::ap_const_boolean_1 = true;

read_byte_array::read_byte_array(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( stream_ap_uint_32_V_V_TVALID );
    sensitive << ( icmp_ln34_fu_107_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( stream_ap_uint_32_V_V_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln34_fu_107_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( stream_ap_uint_32_V_V_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln34_fu_107_p2 );

    SC_METHOD(thread_data_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln36_fu_118_p1 );
    sensitive << ( zext_ln38_fu_171_p1 );

    SC_METHOD(thread_data_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln37_fu_140_p1 );
    sensitive << ( zext_ln39_fu_182_p1 );

    SC_METHOD(thread_data_ce0);
    sensitive << ( stream_ap_uint_32_V_V_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln34_fu_107_p2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_data_ce1);
    sensitive << ( stream_ap_uint_32_V_V_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln34_fu_107_p2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_data_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( p_Result_3_reg_196 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( trunc_ln681_fu_113_p1 );

    SC_METHOD(thread_data_d1);
    sensitive << ( stream_ap_uint_32_V_V_TDATA );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( p_Result_4_reg_201 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_data_we0);
    sensitive << ( stream_ap_uint_32_V_V_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln34_fu_107_p2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_data_we1);
    sensitive << ( stream_ap_uint_32_V_V_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln34_fu_107_p2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_i_fu_187_p2);
    sensitive << ( i_0_reg_95 );

    SC_METHOD(thread_icmp_ln34_fu_107_p2);
    sensitive << ( stream_ap_uint_32_V_V_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln34_fu_107_p2 );
    sensitive << ( i_0_reg_95 );

    SC_METHOD(thread_or_ln37_fu_134_p2);
    sensitive << ( i_0_reg_95 );

    SC_METHOD(thread_or_ln38_fu_165_p2);
    sensitive << ( i_0_reg_95 );

    SC_METHOD(thread_or_ln39_fu_176_p2);
    sensitive << ( i_0_reg_95 );

    SC_METHOD(thread_stream_ap_uint_32_V_V_TDATA_blk_n);
    sensitive << ( stream_ap_uint_32_V_V_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln34_fu_107_p2 );

    SC_METHOD(thread_stream_ap_uint_32_V_V_TREADY);
    sensitive << ( stream_ap_uint_32_V_V_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln34_fu_107_p2 );

    SC_METHOD(thread_trunc_ln681_fu_113_p1);
    sensitive << ( stream_ap_uint_32_V_V_TDATA );

    SC_METHOD(thread_zext_ln36_fu_118_p1);
    sensitive << ( i_0_reg_95 );

    SC_METHOD(thread_zext_ln37_fu_140_p1);
    sensitive << ( or_ln37_fu_134_p2 );

    SC_METHOD(thread_zext_ln38_fu_171_p1);
    sensitive << ( or_ln38_fu_165_p2 );

    SC_METHOD(thread_zext_ln39_fu_182_p1);
    sensitive << ( or_ln39_fu_176_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( stream_ap_uint_32_V_V_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln34_fu_107_p2 );

    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "read_byte_array_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, stream_ap_uint_32_V_V_TDATA, "(port)stream_ap_uint_32_V_V_TDATA");
    sc_trace(mVcdFile, stream_ap_uint_32_V_V_TVALID, "(port)stream_ap_uint_32_V_V_TVALID");
    sc_trace(mVcdFile, stream_ap_uint_32_V_V_TREADY, "(port)stream_ap_uint_32_V_V_TREADY");
    sc_trace(mVcdFile, data_address0, "(port)data_address0");
    sc_trace(mVcdFile, data_ce0, "(port)data_ce0");
    sc_trace(mVcdFile, data_we0, "(port)data_we0");
    sc_trace(mVcdFile, data_d0, "(port)data_d0");
    sc_trace(mVcdFile, data_address1, "(port)data_address1");
    sc_trace(mVcdFile, data_ce1, "(port)data_ce1");
    sc_trace(mVcdFile, data_we1, "(port)data_we1");
    sc_trace(mVcdFile, data_d1, "(port)data_d1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, stream_ap_uint_32_V_V_TDATA_blk_n, "stream_ap_uint_32_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln34_fu_107_p2, "icmp_ln34_fu_107_p2");
    sc_trace(mVcdFile, p_Result_3_reg_196, "p_Result_3_reg_196");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, p_Result_4_reg_201, "p_Result_4_reg_201");
    sc_trace(mVcdFile, i_fu_187_p2, "i_fu_187_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_0_reg_95, "i_0_reg_95");
    sc_trace(mVcdFile, zext_ln36_fu_118_p1, "zext_ln36_fu_118_p1");
    sc_trace(mVcdFile, zext_ln37_fu_140_p1, "zext_ln37_fu_140_p1");
    sc_trace(mVcdFile, zext_ln38_fu_171_p1, "zext_ln38_fu_171_p1");
    sc_trace(mVcdFile, zext_ln39_fu_182_p1, "zext_ln39_fu_182_p1");
    sc_trace(mVcdFile, trunc_ln681_fu_113_p1, "trunc_ln681_fu_113_p1");
    sc_trace(mVcdFile, or_ln37_fu_134_p2, "or_ln37_fu_134_p2");
    sc_trace(mVcdFile, or_ln38_fu_165_p2, "or_ln38_fu_165_p2");
    sc_trace(mVcdFile, or_ln39_fu_176_p2, "or_ln39_fu_176_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

read_byte_array::~read_byte_array() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void read_byte_array::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_0_reg_95 = i_fu_187_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_95 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln34_fu_107_p2.read(), ap_const_lv1_1) && !(esl_seteq<1,1,1>(icmp_ln34_fu_107_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, stream_ap_uint_32_V_V_TVALID.read())))) {
        p_Result_3_reg_196 = stream_ap_uint_32_V_V_TDATA.read().range(23, 16);
        p_Result_4_reg_201 = stream_ap_uint_32_V_V_TDATA.read().range(31, 24);
    }
}

void read_byte_array::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void read_byte_array::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void read_byte_array::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void read_byte_array::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,1,1>(icmp_ln34_fu_107_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, stream_ap_uint_32_V_V_TVALID.read()));
}

void read_byte_array::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(icmp_ln34_fu_107_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, stream_ap_uint_32_V_V_TVALID.read())) && 
          esl_seteq<1,1,1>(icmp_ln34_fu_107_p2.read(), ap_const_lv1_0)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void read_byte_array::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void read_byte_array::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(icmp_ln34_fu_107_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, stream_ap_uint_32_V_V_TVALID.read())) && 
         esl_seteq<1,1,1>(icmp_ln34_fu_107_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void read_byte_array::thread_data_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        data_address0 =  (sc_lv<6>) (zext_ln38_fu_171_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        data_address0 =  (sc_lv<6>) (zext_ln36_fu_118_p1.read());
    } else {
        data_address0 = "XXXXXX";
    }
}

void read_byte_array::thread_data_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        data_address1 =  (sc_lv<6>) (zext_ln39_fu_182_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        data_address1 =  (sc_lv<6>) (zext_ln37_fu_140_p1.read());
    } else {
        data_address1 = "XXXXXX";
    }
}

void read_byte_array::thread_data_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(icmp_ln34_fu_107_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, stream_ap_uint_32_V_V_TVALID.read()))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        data_ce0 = ap_const_logic_1;
    } else {
        data_ce0 = ap_const_logic_0;
    }
}

void read_byte_array::thread_data_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          !(esl_seteq<1,1,1>(icmp_ln34_fu_107_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, stream_ap_uint_32_V_V_TVALID.read()))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        data_ce1 = ap_const_logic_1;
    } else {
        data_ce1 = ap_const_logic_0;
    }
}

void read_byte_array::thread_data_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        data_d0 = p_Result_3_reg_196.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        data_d0 = trunc_ln681_fu_113_p1.read();
    } else {
        data_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void read_byte_array::thread_data_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        data_d1 = p_Result_4_reg_201.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        data_d1 = stream_ap_uint_32_V_V_TDATA.read().range(15, 8);
    } else {
        data_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void read_byte_array::thread_data_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln34_fu_107_p2.read(), ap_const_lv1_1) && 
          !(esl_seteq<1,1,1>(icmp_ln34_fu_107_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, stream_ap_uint_32_V_V_TVALID.read()))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        data_we0 = ap_const_logic_1;
    } else {
        data_we0 = ap_const_logic_0;
    }
}

void read_byte_array::thread_data_we1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln34_fu_107_p2.read(), ap_const_lv1_1) && 
          !(esl_seteq<1,1,1>(icmp_ln34_fu_107_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, stream_ap_uint_32_V_V_TVALID.read()))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        data_we1 = ap_const_logic_1;
    } else {
        data_we1 = ap_const_logic_0;
    }
}

void read_byte_array::thread_i_fu_187_p2() {
    i_fu_187_p2 = (!ap_const_lv6_4.is_01() || !i_0_reg_95.read().is_01())? sc_lv<6>(): (sc_biguint<6>(ap_const_lv6_4) + sc_biguint<6>(i_0_reg_95.read()));
}

void read_byte_array::thread_icmp_ln34_fu_107_p2() {
    icmp_ln34_fu_107_p2 = (!i_0_reg_95.read().is_01() || !ap_const_lv6_30.is_01())? sc_lv<1>(): (sc_biguint<6>(i_0_reg_95.read()) < sc_biguint<6>(ap_const_lv6_30));
}

void read_byte_array::thread_or_ln37_fu_134_p2() {
    or_ln37_fu_134_p2 = (i_0_reg_95.read() | ap_const_lv6_1);
}

void read_byte_array::thread_or_ln38_fu_165_p2() {
    or_ln38_fu_165_p2 = (i_0_reg_95.read() | ap_const_lv6_2);
}

void read_byte_array::thread_or_ln39_fu_176_p2() {
    or_ln39_fu_176_p2 = (i_0_reg_95.read() | ap_const_lv6_3);
}

void read_byte_array::thread_stream_ap_uint_32_V_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln34_fu_107_p2.read(), ap_const_lv1_1))) {
        stream_ap_uint_32_V_V_TDATA_blk_n = stream_ap_uint_32_V_V_TVALID.read();
    } else {
        stream_ap_uint_32_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void read_byte_array::thread_stream_ap_uint_32_V_V_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln34_fu_107_p2.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(icmp_ln34_fu_107_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, stream_ap_uint_32_V_V_TVALID.read())))) {
        stream_ap_uint_32_V_V_TREADY = ap_const_logic_1;
    } else {
        stream_ap_uint_32_V_V_TREADY = ap_const_logic_0;
    }
}

void read_byte_array::thread_trunc_ln681_fu_113_p1() {
    trunc_ln681_fu_113_p1 = stream_ap_uint_32_V_V_TDATA.read().range(8-1, 0);
}

void read_byte_array::thread_zext_ln36_fu_118_p1() {
    zext_ln36_fu_118_p1 = esl_zext<64,6>(i_0_reg_95.read());
}

void read_byte_array::thread_zext_ln37_fu_140_p1() {
    zext_ln37_fu_140_p1 = esl_zext<64,6>(or_ln37_fu_134_p2.read());
}

void read_byte_array::thread_zext_ln38_fu_171_p1() {
    zext_ln38_fu_171_p1 = esl_zext<64,6>(or_ln38_fu_165_p2.read());
}

void read_byte_array::thread_zext_ln39_fu_182_p1() {
    zext_ln39_fu_182_p1 = esl_zext<64,6>(or_ln39_fu_176_p2.read());
}

void read_byte_array::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(icmp_ln34_fu_107_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, stream_ap_uint_32_V_V_TVALID.read())) && esl_seteq<1,1,1>(icmp_ln34_fu_107_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln34_fu_107_p2.read(), ap_const_lv1_1) && !(esl_seteq<1,1,1>(icmp_ln34_fu_107_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, stream_ap_uint_32_V_V_TVALID.read())))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

}

