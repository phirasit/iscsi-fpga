// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "write_to_tcp.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic write_to_tcp::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic write_to_tcp::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> write_to_tcp::ap_ST_fsm_state1 = "1";
const sc_lv<2> write_to_tcp::ap_ST_fsm_state2 = "10";
const sc_lv<32> write_to_tcp::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> write_to_tcp::ap_const_lv32_1 = "1";
const bool write_to_tcp::ap_const_boolean_1 = true;

write_to_tcp::write_to_tcp(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_write_byte_array_1_fu_16 = new write_byte_array_1("grp_write_byte_array_1_fu_16");
    grp_write_byte_array_1_fu_16->ap_clk(ap_clk);
    grp_write_byte_array_1_fu_16->ap_rst(ap_rst);
    grp_write_byte_array_1_fu_16->ap_start(grp_write_byte_array_1_fu_16_ap_start);
    grp_write_byte_array_1_fu_16->ap_done(grp_write_byte_array_1_fu_16_ap_done);
    grp_write_byte_array_1_fu_16->ap_idle(grp_write_byte_array_1_fu_16_ap_idle);
    grp_write_byte_array_1_fu_16->ap_ready(grp_write_byte_array_1_fu_16_ap_ready);
    grp_write_byte_array_1_fu_16->stream_ap_uint_32_V_V_TDATA(grp_write_byte_array_1_fu_16_stream_ap_uint_32_V_V_TDATA);
    grp_write_byte_array_1_fu_16->stream_ap_uint_32_V_V_TVALID(grp_write_byte_array_1_fu_16_stream_ap_uint_32_V_V_TVALID);
    grp_write_byte_array_1_fu_16->stream_ap_uint_32_V_V_TREADY(grp_write_byte_array_1_fu_16_stream_ap_uint_32_V_V_TREADY);
    grp_write_byte_array_1_fu_16->data_address0(grp_write_byte_array_1_fu_16_data_address0);
    grp_write_byte_array_1_fu_16->data_ce0(grp_write_byte_array_1_fu_16_data_ce0);
    grp_write_byte_array_1_fu_16->data_q0(iscsi_pdu_header_buffer_V_q0);
    grp_write_byte_array_1_fu_16->data_address1(grp_write_byte_array_1_fu_16_data_address1);
    grp_write_byte_array_1_fu_16->data_ce1(grp_write_byte_array_1_fu_16_data_ce1);
    grp_write_byte_array_1_fu_16->data_q1(iscsi_pdu_header_buffer_V_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_write_byte_array_1_fu_16_ap_done );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_write_byte_array_1_fu_16_ap_done );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_grp_write_byte_array_1_fu_16_ap_start);
    sensitive << ( grp_write_byte_array_1_fu_16_ap_start_reg );

    SC_METHOD(thread_grp_write_byte_array_1_fu_16_stream_ap_uint_32_V_V_TREADY);
    sensitive << ( out_stream_V_V_TREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_iscsi_pdu_header_buffer_V_address0);
    sensitive << ( grp_write_byte_array_1_fu_16_data_address0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_iscsi_pdu_header_buffer_V_address1);
    sensitive << ( grp_write_byte_array_1_fu_16_data_address1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_iscsi_pdu_header_buffer_V_ce0);
    sensitive << ( grp_write_byte_array_1_fu_16_data_ce0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_iscsi_pdu_header_buffer_V_ce1);
    sensitive << ( grp_write_byte_array_1_fu_16_data_ce1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_out_stream_V_V_TDATA);
    sensitive << ( grp_write_byte_array_1_fu_16_stream_ap_uint_32_V_V_TDATA );
    sensitive << ( grp_write_byte_array_1_fu_16_stream_ap_uint_32_V_V_TVALID );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_out_stream_V_V_TVALID);
    sensitive << ( grp_write_byte_array_1_fu_16_stream_ap_uint_32_V_V_TVALID );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_write_byte_array_1_fu_16_ap_done );
    sensitive << ( ap_CS_fsm_state2 );

    ap_CS_fsm = "01";
    grp_write_byte_array_1_fu_16_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "write_to_tcp_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, iscsi_pdu_header_buffer_V_address0, "(port)iscsi_pdu_header_buffer_V_address0");
    sc_trace(mVcdFile, iscsi_pdu_header_buffer_V_ce0, "(port)iscsi_pdu_header_buffer_V_ce0");
    sc_trace(mVcdFile, iscsi_pdu_header_buffer_V_q0, "(port)iscsi_pdu_header_buffer_V_q0");
    sc_trace(mVcdFile, iscsi_pdu_header_buffer_V_address1, "(port)iscsi_pdu_header_buffer_V_address1");
    sc_trace(mVcdFile, iscsi_pdu_header_buffer_V_ce1, "(port)iscsi_pdu_header_buffer_V_ce1");
    sc_trace(mVcdFile, iscsi_pdu_header_buffer_V_q1, "(port)iscsi_pdu_header_buffer_V_q1");
    sc_trace(mVcdFile, out_stream_V_V_TDATA, "(port)out_stream_V_V_TDATA");
    sc_trace(mVcdFile, out_stream_V_V_TVALID, "(port)out_stream_V_V_TVALID");
    sc_trace(mVcdFile, out_stream_V_V_TREADY, "(port)out_stream_V_V_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_write_byte_array_1_fu_16_ap_start, "grp_write_byte_array_1_fu_16_ap_start");
    sc_trace(mVcdFile, grp_write_byte_array_1_fu_16_ap_done, "grp_write_byte_array_1_fu_16_ap_done");
    sc_trace(mVcdFile, grp_write_byte_array_1_fu_16_ap_idle, "grp_write_byte_array_1_fu_16_ap_idle");
    sc_trace(mVcdFile, grp_write_byte_array_1_fu_16_ap_ready, "grp_write_byte_array_1_fu_16_ap_ready");
    sc_trace(mVcdFile, grp_write_byte_array_1_fu_16_stream_ap_uint_32_V_V_TDATA, "grp_write_byte_array_1_fu_16_stream_ap_uint_32_V_V_TDATA");
    sc_trace(mVcdFile, grp_write_byte_array_1_fu_16_stream_ap_uint_32_V_V_TVALID, "grp_write_byte_array_1_fu_16_stream_ap_uint_32_V_V_TVALID");
    sc_trace(mVcdFile, grp_write_byte_array_1_fu_16_stream_ap_uint_32_V_V_TREADY, "grp_write_byte_array_1_fu_16_stream_ap_uint_32_V_V_TREADY");
    sc_trace(mVcdFile, grp_write_byte_array_1_fu_16_data_address0, "grp_write_byte_array_1_fu_16_data_address0");
    sc_trace(mVcdFile, grp_write_byte_array_1_fu_16_data_ce0, "grp_write_byte_array_1_fu_16_data_ce0");
    sc_trace(mVcdFile, grp_write_byte_array_1_fu_16_data_address1, "grp_write_byte_array_1_fu_16_data_address1");
    sc_trace(mVcdFile, grp_write_byte_array_1_fu_16_data_ce1, "grp_write_byte_array_1_fu_16_data_ce1");
    sc_trace(mVcdFile, grp_write_byte_array_1_fu_16_ap_start_reg, "grp_write_byte_array_1_fu_16_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

write_to_tcp::~write_to_tcp() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_write_byte_array_1_fu_16;
}

void write_to_tcp::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_write_byte_array_1_fu_16_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            grp_write_byte_array_1_fu_16_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_write_byte_array_1_fu_16_ap_ready.read())) {
            grp_write_byte_array_1_fu_16_ap_start_reg = ap_const_logic_0;
        }
    }
}

void write_to_tcp::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void write_to_tcp::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void write_to_tcp::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(grp_write_byte_array_1_fu_16_ap_done.read(), ap_const_logic_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void write_to_tcp::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void write_to_tcp::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(grp_write_byte_array_1_fu_16_ap_done.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void write_to_tcp::thread_grp_write_byte_array_1_fu_16_ap_start() {
    grp_write_byte_array_1_fu_16_ap_start = grp_write_byte_array_1_fu_16_ap_start_reg.read();
}

void write_to_tcp::thread_grp_write_byte_array_1_fu_16_stream_ap_uint_32_V_V_TREADY() {
    grp_write_byte_array_1_fu_16_stream_ap_uint_32_V_V_TREADY = (out_stream_V_V_TREADY.read() & ap_CS_fsm_state2.read());
}

void write_to_tcp::thread_iscsi_pdu_header_buffer_V_address0() {
    iscsi_pdu_header_buffer_V_address0 = grp_write_byte_array_1_fu_16_data_address0.read();
}

void write_to_tcp::thread_iscsi_pdu_header_buffer_V_address1() {
    iscsi_pdu_header_buffer_V_address1 = grp_write_byte_array_1_fu_16_data_address1.read();
}

void write_to_tcp::thread_iscsi_pdu_header_buffer_V_ce0() {
    iscsi_pdu_header_buffer_V_ce0 = grp_write_byte_array_1_fu_16_data_ce0.read();
}

void write_to_tcp::thread_iscsi_pdu_header_buffer_V_ce1() {
    iscsi_pdu_header_buffer_V_ce1 = grp_write_byte_array_1_fu_16_data_ce1.read();
}

void write_to_tcp::thread_out_stream_V_V_TDATA() {
    out_stream_V_V_TDATA = grp_write_byte_array_1_fu_16_stream_ap_uint_32_V_V_TDATA.read();
}

void write_to_tcp::thread_out_stream_V_V_TVALID() {
    out_stream_V_V_TVALID = grp_write_byte_array_1_fu_16_stream_ap_uint_32_V_V_TVALID.read();
}

void write_to_tcp::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_write_byte_array_1_fu_16_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

