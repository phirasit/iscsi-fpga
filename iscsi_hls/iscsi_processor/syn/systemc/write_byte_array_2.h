// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _write_byte_array_2_HH_
#define _write_byte_array_2_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "write_byte_array_2_authentication_respo.h"

namespace ap_rtl {

struct write_byte_array_2 : public sc_module {
    // Port declarations 9
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<32> > stream_ap_uint_32_V_V_TDATA;
    sc_out< sc_logic > stream_ap_uint_32_V_V_TVALID;
    sc_in< sc_logic > stream_ap_uint_32_V_V_TREADY;


    // Module declarations
    write_byte_array_2(sc_module_name name);
    SC_HAS_PROCESS(write_byte_array_2);

    ~write_byte_array_2();

    sc_trace_file* mVcdFile;

    write_byte_array_2_authentication_respo* authentication_respo_U;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > authentication_respo_address0;
    sc_signal< sc_logic > authentication_respo_ce0;
    sc_signal< sc_lv<7> > authentication_respo_q0;
    sc_signal< sc_lv<4> > authentication_respo_address1;
    sc_signal< sc_logic > authentication_respo_ce1;
    sc_signal< sc_lv<7> > authentication_respo_q1;
    sc_signal< sc_lv<4> > authentication_respo_address2;
    sc_signal< sc_logic > authentication_respo_ce2;
    sc_signal< sc_lv<7> > authentication_respo_q2;
    sc_signal< sc_lv<4> > authentication_respo_address3;
    sc_signal< sc_logic > authentication_respo_ce3;
    sc_signal< sc_lv<7> > authentication_respo_q3;
    sc_signal< sc_logic > stream_ap_uint_32_V_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln22_fu_107_p2;
    sc_signal< sc_lv<1> > icmp_ln26_fu_150_p2;
    sc_signal< sc_lv<1> > icmp_ln26_reg_221;
    sc_signal< sc_lv<5> > i_fu_161_p2;
    sc_signal< sc_lv<5> > i_reg_231;
    sc_signal< sc_lv<5> > i_0_reg_96;
    sc_signal< sc_lv<64> > zext_ln23_fu_113_p1;
    sc_signal< sc_lv<64> > zext_ln24_fu_128_p1;
    sc_signal< sc_lv<64> > zext_ln25_fu_139_p1;
    sc_signal< sc_lv<64> > zext_ln26_fu_156_p1;
    sc_signal< sc_lv<4> > trunc_ln22_fu_118_p1;
    sc_signal< sc_lv<4> > or_ln24_fu_122_p2;
    sc_signal< sc_lv<4> > or_ln25_fu_133_p2;
    sc_signal< sc_lv<4> > or_ln26_fu_144_p2;
    sc_signal< sc_lv<7> > select_ln26_fu_179_p3;
    sc_signal< sc_lv<8> > zext_ln25_1_fu_175_p1;
    sc_signal< sc_lv<8> > zext_ln24_1_fu_171_p1;
    sc_signal< sc_lv<8> > zext_ln23_1_fu_167_p1;
    sc_signal< sc_lv<31> > tmp_fu_186_p5;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<5> ap_const_lv5_F;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<4> ap_const_lv4_2;
    static const sc_lv<4> ap_const_lv4_3;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<5> ap_const_lv5_4;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_authentication_respo_address0();
    void thread_authentication_respo_address1();
    void thread_authentication_respo_address2();
    void thread_authentication_respo_address3();
    void thread_authentication_respo_ce0();
    void thread_authentication_respo_ce1();
    void thread_authentication_respo_ce2();
    void thread_authentication_respo_ce3();
    void thread_i_fu_161_p2();
    void thread_icmp_ln22_fu_107_p2();
    void thread_icmp_ln26_fu_150_p2();
    void thread_or_ln24_fu_122_p2();
    void thread_or_ln25_fu_133_p2();
    void thread_or_ln26_fu_144_p2();
    void thread_select_ln26_fu_179_p3();
    void thread_stream_ap_uint_32_V_V_TDATA();
    void thread_stream_ap_uint_32_V_V_TDATA_blk_n();
    void thread_stream_ap_uint_32_V_V_TVALID();
    void thread_tmp_fu_186_p5();
    void thread_trunc_ln22_fu_118_p1();
    void thread_zext_ln23_1_fu_167_p1();
    void thread_zext_ln23_fu_113_p1();
    void thread_zext_ln24_1_fu_171_p1();
    void thread_zext_ln24_fu_128_p1();
    void thread_zext_ln25_1_fu_175_p1();
    void thread_zext_ln25_fu_139_p1();
    void thread_zext_ln26_fu_156_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
