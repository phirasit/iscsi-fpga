// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _write_to_tcp_HH_
#define _write_to_tcp_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "write_byte_array_1.h"

namespace ap_rtl {

struct write_to_tcp : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<6> > iscsi_pdu_header_buffer_V_address0;
    sc_out< sc_logic > iscsi_pdu_header_buffer_V_ce0;
    sc_in< sc_lv<8> > iscsi_pdu_header_buffer_V_q0;
    sc_out< sc_lv<6> > iscsi_pdu_header_buffer_V_address1;
    sc_out< sc_logic > iscsi_pdu_header_buffer_V_ce1;
    sc_in< sc_lv<8> > iscsi_pdu_header_buffer_V_q1;
    sc_out< sc_lv<32> > out_stream_V_V_TDATA;
    sc_out< sc_logic > out_stream_V_V_TVALID;
    sc_in< sc_logic > out_stream_V_V_TREADY;


    // Module declarations
    write_to_tcp(sc_module_name name);
    SC_HAS_PROCESS(write_to_tcp);

    ~write_to_tcp();

    sc_trace_file* mVcdFile;

    write_byte_array_1* grp_write_byte_array_1_fu_16;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > grp_write_byte_array_1_fu_16_ap_start;
    sc_signal< sc_logic > grp_write_byte_array_1_fu_16_ap_done;
    sc_signal< sc_logic > grp_write_byte_array_1_fu_16_ap_idle;
    sc_signal< sc_logic > grp_write_byte_array_1_fu_16_ap_ready;
    sc_signal< sc_lv<32> > grp_write_byte_array_1_fu_16_stream_ap_uint_32_V_V_TDATA;
    sc_signal< sc_logic > grp_write_byte_array_1_fu_16_stream_ap_uint_32_V_V_TVALID;
    sc_signal< sc_logic > grp_write_byte_array_1_fu_16_stream_ap_uint_32_V_V_TREADY;
    sc_signal< sc_lv<6> > grp_write_byte_array_1_fu_16_data_address0;
    sc_signal< sc_logic > grp_write_byte_array_1_fu_16_data_ce0;
    sc_signal< sc_lv<6> > grp_write_byte_array_1_fu_16_data_address1;
    sc_signal< sc_logic > grp_write_byte_array_1_fu_16_data_ce1;
    sc_signal< sc_logic > grp_write_byte_array_1_fu_16_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_write_byte_array_1_fu_16_ap_start();
    void thread_grp_write_byte_array_1_fu_16_stream_ap_uint_32_V_V_TREADY();
    void thread_iscsi_pdu_header_buffer_V_address0();
    void thread_iscsi_pdu_header_buffer_V_address1();
    void thread_iscsi_pdu_header_buffer_V_ce0();
    void thread_iscsi_pdu_header_buffer_V_ce1();
    void thread_out_stream_V_V_TDATA();
    void thread_out_stream_V_V_TVALID();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
