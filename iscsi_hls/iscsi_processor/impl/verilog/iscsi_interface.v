// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="iscsi_interface,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.495000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=16,HLS_SYN_FF=8809,HLS_SYN_LUT=18054,HLS_VERSION=2019_1}" *)

module iscsi_interface (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        tcp_in_V_V_TDATA,
        tcp_in_V_V_TVALID,
        tcp_in_V_V_TREADY,
        tcp_out_V_V_TDATA,
        tcp_out_V_V_TVALID,
        tcp_out_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] tcp_in_V_V_TDATA;
input   tcp_in_V_V_TVALID;
output   tcp_in_V_V_TREADY;
output  [31:0] tcp_out_V_V_TDATA;
output   tcp_out_V_V_TVALID;
input   tcp_out_V_V_TREADY;

reg ap_idle;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] tcp_in_V_V_0_data_out;
wire    tcp_in_V_V_0_vld_in;
wire    tcp_in_V_V_0_vld_out;
wire    tcp_in_V_V_0_ack_in;
reg    tcp_in_V_V_0_ack_out;
reg   [31:0] tcp_in_V_V_0_payload_A;
reg   [31:0] tcp_in_V_V_0_payload_B;
reg    tcp_in_V_V_0_sel_rd;
reg    tcp_in_V_V_0_sel_wr;
wire    tcp_in_V_V_0_sel;
wire    tcp_in_V_V_0_load_A;
wire    tcp_in_V_V_0_load_B;
reg   [1:0] tcp_in_V_V_0_state;
wire    tcp_in_V_V_0_state_cmp_full;
reg   [31:0] tcp_out_V_V_1_data_in;
reg   [31:0] tcp_out_V_V_1_data_out;
reg    tcp_out_V_V_1_vld_in;
wire    tcp_out_V_V_1_vld_out;
wire    tcp_out_V_V_1_ack_in;
wire    tcp_out_V_V_1_ack_out;
reg   [31:0] tcp_out_V_V_1_payload_A;
reg   [31:0] tcp_out_V_V_1_payload_B;
reg    tcp_out_V_V_1_sel_rd;
reg    tcp_out_V_V_1_sel_wr;
wire    tcp_out_V_V_1_sel;
wire    tcp_out_V_V_1_load_A;
wire    tcp_out_V_V_1_load_B;
reg   [1:0] tcp_out_V_V_1_state;
wire    tcp_out_V_V_1_state_cmp_full;
reg    tcp_out_V_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    ap_block_state2_io;
wire    grp_process_pdu_fu_144_ap_start;
wire    grp_process_pdu_fu_144_ap_done;
wire    grp_process_pdu_fu_144_ap_idle;
wire    grp_process_pdu_fu_144_ap_ready;
wire    grp_process_pdu_fu_144_tcp_in_V_V_TVALID;
wire    grp_process_pdu_fu_144_tcp_in_V_V_TREADY;
wire   [31:0] grp_process_pdu_fu_144_tcp_out_V_V_TDATA;
wire    grp_process_pdu_fu_144_tcp_out_V_V_TVALID;
wire    grp_process_pdu_fu_144_tcp_out_V_V_TREADY;
reg    grp_process_pdu_fu_144_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [0:0] x_fu_132;
reg   [4:0] ap_NS_fsm;
reg    ap_block_state3_io;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 tcp_in_V_V_0_sel_rd = 1'b0;
#0 tcp_in_V_V_0_sel_wr = 1'b0;
#0 tcp_in_V_V_0_state = 2'd0;
#0 tcp_out_V_V_1_sel_rd = 1'b0;
#0 tcp_out_V_V_1_sel_wr = 1'b0;
#0 tcp_out_V_V_1_state = 2'd0;
#0 grp_process_pdu_fu_144_ap_start_reg = 1'b0;
end

process_pdu grp_process_pdu_fu_144(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_process_pdu_fu_144_ap_start),
    .ap_done(grp_process_pdu_fu_144_ap_done),
    .ap_idle(grp_process_pdu_fu_144_ap_idle),
    .ap_ready(grp_process_pdu_fu_144_ap_ready),
    .tcp_in_V_V_TDATA(tcp_in_V_V_0_data_out),
    .tcp_in_V_V_TVALID(grp_process_pdu_fu_144_tcp_in_V_V_TVALID),
    .tcp_in_V_V_TREADY(grp_process_pdu_fu_144_tcp_in_V_V_TREADY),
    .tcp_out_V_V_TDATA(grp_process_pdu_fu_144_tcp_out_V_V_TDATA),
    .tcp_out_V_V_TVALID(grp_process_pdu_fu_144_tcp_out_V_V_TVALID),
    .tcp_out_V_V_TREADY(grp_process_pdu_fu_144_tcp_out_V_V_TREADY)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_process_pdu_fu_144_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_process_pdu_fu_144_ap_start_reg <= 1'b1;
        end else if ((grp_process_pdu_fu_144_ap_ready == 1'b1)) begin
            grp_process_pdu_fu_144_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tcp_in_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((tcp_in_V_V_0_ack_out == 1'b1) & (tcp_in_V_V_0_vld_out == 1'b1))) begin
            tcp_in_V_V_0_sel_rd <= ~tcp_in_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tcp_in_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((tcp_in_V_V_0_ack_in == 1'b1) & (tcp_in_V_V_0_vld_in == 1'b1))) begin
            tcp_in_V_V_0_sel_wr <= ~tcp_in_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tcp_in_V_V_0_state <= 2'd0;
    end else begin
        if ((((tcp_in_V_V_0_state == 2'd2) & (tcp_in_V_V_0_vld_in == 1'b0)) | ((tcp_in_V_V_0_state == 2'd3) & (tcp_in_V_V_0_vld_in == 1'b0) & (tcp_in_V_V_0_ack_out == 1'b1)))) begin
            tcp_in_V_V_0_state <= 2'd2;
        end else if ((((tcp_in_V_V_0_state == 2'd1) & (tcp_in_V_V_0_ack_out == 1'b0)) | ((tcp_in_V_V_0_state == 2'd3) & (tcp_in_V_V_0_ack_out == 1'b0) & (tcp_in_V_V_0_vld_in == 1'b1)))) begin
            tcp_in_V_V_0_state <= 2'd1;
        end else if (((~((tcp_in_V_V_0_vld_in == 1'b0) & (tcp_in_V_V_0_ack_out == 1'b1)) & ~((tcp_in_V_V_0_ack_out == 1'b0) & (tcp_in_V_V_0_vld_in == 1'b1)) & (tcp_in_V_V_0_state == 2'd3)) | ((tcp_in_V_V_0_state == 2'd1) & (tcp_in_V_V_0_ack_out == 1'b1)) | ((tcp_in_V_V_0_state == 2'd2) & (tcp_in_V_V_0_vld_in == 1'b1)))) begin
            tcp_in_V_V_0_state <= 2'd3;
        end else begin
            tcp_in_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tcp_out_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((tcp_out_V_V_1_ack_out == 1'b1) & (tcp_out_V_V_1_vld_out == 1'b1))) begin
            tcp_out_V_V_1_sel_rd <= ~tcp_out_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tcp_out_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((tcp_out_V_V_1_ack_in == 1'b1) & (tcp_out_V_V_1_vld_in == 1'b1))) begin
            tcp_out_V_V_1_sel_wr <= ~tcp_out_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        tcp_out_V_V_1_state <= 2'd0;
    end else begin
        if ((((tcp_out_V_V_1_state == 2'd2) & (tcp_out_V_V_1_vld_in == 1'b0)) | ((tcp_out_V_V_1_state == 2'd3) & (tcp_out_V_V_1_vld_in == 1'b0) & (tcp_out_V_V_1_ack_out == 1'b1)))) begin
            tcp_out_V_V_1_state <= 2'd2;
        end else if ((((tcp_out_V_V_1_state == 2'd1) & (tcp_out_V_V_1_ack_out == 1'b0)) | ((tcp_out_V_V_1_state == 2'd3) & (tcp_out_V_V_1_ack_out == 1'b0) & (tcp_out_V_V_1_vld_in == 1'b1)))) begin
            tcp_out_V_V_1_state <= 2'd1;
        end else if (((~((tcp_out_V_V_1_vld_in == 1'b0) & (tcp_out_V_V_1_ack_out == 1'b1)) & ~((tcp_out_V_V_1_ack_out == 1'b0) & (tcp_out_V_V_1_vld_in == 1'b1)) & (tcp_out_V_V_1_state == 2'd3)) | ((tcp_out_V_V_1_state == 2'd1) & (tcp_out_V_V_1_ack_out == 1'b1)) | ((tcp_out_V_V_1_state == 2'd2) & (tcp_out_V_V_1_vld_in == 1'b1)))) begin
            tcp_out_V_V_1_state <= 2'd3;
        end else begin
            tcp_out_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((tcp_in_V_V_0_load_A == 1'b1)) begin
        tcp_in_V_V_0_payload_A <= tcp_in_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((tcp_in_V_V_0_load_B == 1'b1)) begin
        tcp_in_V_V_0_payload_B <= tcp_in_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((tcp_out_V_V_1_load_A == 1'b1)) begin
        tcp_out_V_V_1_payload_A <= tcp_out_V_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((tcp_out_V_V_1_load_B == 1'b1)) begin
        tcp_out_V_V_1_payload_B <= tcp_out_V_V_1_data_in;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tcp_in_V_V_0_ack_out = grp_process_pdu_fu_144_tcp_in_V_V_TREADY;
    end else begin
        tcp_in_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((tcp_in_V_V_0_sel == 1'b1)) begin
        tcp_in_V_V_0_data_out = tcp_in_V_V_0_payload_B;
    end else begin
        tcp_in_V_V_0_data_out = tcp_in_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((x_fu_132 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tcp_out_V_V_1_data_in = 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (grp_process_pdu_fu_144_tcp_out_V_V_TVALID == 1'b1))) begin
        tcp_out_V_V_1_data_in = grp_process_pdu_fu_144_tcp_out_V_V_TDATA;
    end else begin
        tcp_out_V_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((tcp_out_V_V_1_sel == 1'b1)) begin
        tcp_out_V_V_1_data_out = tcp_out_V_V_1_payload_B;
    end else begin
        tcp_out_V_V_1_data_out = tcp_out_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((x_fu_132 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
        tcp_out_V_V_1_vld_in = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        tcp_out_V_V_1_vld_in = grp_process_pdu_fu_144_tcp_out_V_V_TVALID;
    end else begin
        tcp_out_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((x_fu_132 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((x_fu_132 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        tcp_out_V_V_TDATA_blk_n = tcp_out_V_V_1_state[1'd1];
    end else begin
        tcp_out_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_io))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_process_pdu_fu_144_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state2_io = ((x_fu_132 == 1'd1) & (tcp_out_V_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((x_fu_132 == 1'd1) & (tcp_out_V_V_1_ack_in == 1'b0));
end

assign ap_done = 1'b0;

assign ap_ready = 1'b0;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_process_pdu_fu_144_ap_start = grp_process_pdu_fu_144_ap_start_reg;

assign grp_process_pdu_fu_144_tcp_in_V_V_TVALID = tcp_in_V_V_0_state[1'd0];

assign grp_process_pdu_fu_144_tcp_out_V_V_TREADY = (tcp_out_V_V_1_ack_in & ap_CS_fsm_state5);

assign tcp_in_V_V_0_ack_in = tcp_in_V_V_0_state[1'd1];

assign tcp_in_V_V_0_load_A = (tcp_in_V_V_0_state_cmp_full & ~tcp_in_V_V_0_sel_wr);

assign tcp_in_V_V_0_load_B = (tcp_in_V_V_0_state_cmp_full & tcp_in_V_V_0_sel_wr);

assign tcp_in_V_V_0_sel = tcp_in_V_V_0_sel_rd;

assign tcp_in_V_V_0_state_cmp_full = ((tcp_in_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign tcp_in_V_V_0_vld_in = tcp_in_V_V_TVALID;

assign tcp_in_V_V_0_vld_out = tcp_in_V_V_0_state[1'd0];

assign tcp_in_V_V_TREADY = tcp_in_V_V_0_state[1'd1];

assign tcp_out_V_V_1_ack_in = tcp_out_V_V_1_state[1'd1];

assign tcp_out_V_V_1_ack_out = tcp_out_V_V_TREADY;

assign tcp_out_V_V_1_load_A = (tcp_out_V_V_1_state_cmp_full & ~tcp_out_V_V_1_sel_wr);

assign tcp_out_V_V_1_load_B = (tcp_out_V_V_1_state_cmp_full & tcp_out_V_V_1_sel_wr);

assign tcp_out_V_V_1_sel = tcp_out_V_V_1_sel_rd;

assign tcp_out_V_V_1_state_cmp_full = ((tcp_out_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign tcp_out_V_V_1_vld_out = tcp_out_V_V_1_state[1'd0];

assign tcp_out_V_V_TDATA = tcp_out_V_V_1_data_out;

assign tcp_out_V_V_TVALID = tcp_out_V_V_1_state[1'd0];

assign x_fu_132 = 1'd0;

endmodule //iscsi_interface
