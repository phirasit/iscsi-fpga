// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module update_value_int_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        iscsi_connection_parameter_data_address0,
        iscsi_connection_parameter_data_ce0,
        iscsi_connection_parameter_data_q0,
        idx,
        val_r_i,
        val_r_o,
        val_r_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] iscsi_connection_parameter_data_address0;
output   iscsi_connection_parameter_data_ce0;
input  [7:0] iscsi_connection_parameter_data_q0;
input  [31:0] idx;
input  [31:0] val_r_i;
output  [31:0] val_r_o;
output   val_r_o_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[12:0] iscsi_connection_parameter_data_address0;
reg iscsi_connection_parameter_data_ce0;
reg[31:0] val_r_o;
reg val_r_o_ap_vld;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] p_str25_address0;
reg    p_str25_ce0;
wire   [6:0] p_str25_q0;
wire    ap_CS_fsm_state2;
wire   [7:0] zext_ln122_2_fu_135_p1;
reg   [7:0] zext_ln122_2_reg_246;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln122_fu_139_p2;
reg   [0:0] icmp_ln122_reg_251;
wire   [4:0] i_fu_145_p2;
reg   [4:0] i_reg_255;
wire  signed [31:0] add_ln132_fu_166_p2;
reg  signed [31:0] add_ln132_reg_268;
wire    ap_CS_fsm_state5;
reg   [7:0] iscsi_connection_par_9_reg_278;
wire    ap_CS_fsm_state6;
wire   [31:0] nw_val_fu_229_p2;
wire    ap_CS_fsm_state7;
reg   [4:0] i_0_i_reg_93;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln123_fu_161_p2;
reg   [31:0] idx_assign_0_in_reg_105;
reg   [31:0] nw_val_0_reg_114;
wire   [63:0] zext_ln122_fu_126_p1;
wire  signed [63:0] sext_ln123_fu_156_p1;
wire  signed [63:0] sext_ln134_fu_172_p1;
wire   [0:0] icmp_ln134_fu_177_p2;
wire   [31:0] select_ln138_fu_189_p3;
wire   [31:0] zext_ln122_1_fu_131_p1;
wire   [31:0] add_ln123_fu_151_p2;
wire   [0:0] icmp_ln138_fu_183_p2;
wire   [31:0] shl_ln134_fu_198_p2;
wire   [31:0] shl_ln134_1_fu_204_p2;
wire   [8:0] zext_ln134_fu_210_p1;
wire   [8:0] add_ln134_1_fu_219_p2;
wire  signed [31:0] sext_ln134_1_fu_225_p1;
wire   [31:0] add_ln134_fu_213_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

update_value_int_4_p_str25 #(
    .DataWidth( 7 ),
    .AddressRange( 25 ),
    .AddressWidth( 5 ))
p_str25_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_str25_address0),
    .ce0(p_str25_ce0),
    .q0(p_str25_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_fu_161_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_i_reg_93 <= i_reg_255;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_i_reg_93 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln122_fu_139_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        idx_assign_0_in_reg_105 <= idx;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        idx_assign_0_in_reg_105 <= add_ln132_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln122_fu_139_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        nw_val_0_reg_114 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        nw_val_0_reg_114 <= nw_val_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln132_reg_268 <= add_ln132_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_255 <= i_fu_145_p2;
        icmp_ln122_reg_251 <= icmp_ln122_fu_139_p2;
        zext_ln122_2_reg_246[6 : 0] <= zext_ln122_2_fu_135_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln122_reg_251 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        iscsi_connection_par_9_reg_278 <= iscsi_connection_parameter_data_q0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state6) & ((icmp_ln134_fu_177_p2 == 1'd1) | (icmp_ln122_reg_251 == 1'd0))) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & ((icmp_ln134_fu_177_p2 == 1'd1) | (icmp_ln122_reg_251 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        iscsi_connection_parameter_data_address0 = sext_ln134_fu_172_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        iscsi_connection_parameter_data_address0 = sext_ln123_fu_156_p1;
    end else begin
        iscsi_connection_parameter_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        iscsi_connection_parameter_data_ce0 = 1'b1;
    end else begin
        iscsi_connection_parameter_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_str25_ce0 = 1'b1;
    end else begin
        p_str25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln134_fu_177_p2 == 1'd1) & (icmp_ln122_reg_251 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        val_r_o = select_ln138_fu_189_p3;
    end else begin
        val_r_o = val_r_i;
    end
end

always @ (*) begin
    if (((icmp_ln134_fu_177_p2 == 1'd1) & (icmp_ln122_reg_251 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        val_r_o_ap_vld = 1'b1;
    end else begin
        val_r_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln122_fu_139_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln123_fu_161_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & ((icmp_ln134_fu_177_p2 == 1'd1) | (icmp_ln122_reg_251 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln123_fu_151_p2 = (zext_ln122_1_fu_131_p1 + idx);

assign add_ln132_fu_166_p2 = (idx_assign_0_in_reg_105 + 32'd1);

assign add_ln134_1_fu_219_p2 = ($signed(9'd464) + $signed(zext_ln134_fu_210_p1));

assign add_ln134_fu_213_p2 = (shl_ln134_fu_198_p2 + shl_ln134_1_fu_204_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign i_fu_145_p2 = (i_0_i_reg_93 + 5'd1);

assign icmp_ln122_fu_139_p2 = ((i_0_i_reg_93 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln123_fu_161_p2 = ((iscsi_connection_parameter_data_q0 == zext_ln122_2_reg_246) ? 1'b1 : 1'b0);

assign icmp_ln134_fu_177_p2 = ((iscsi_connection_parameter_data_q0 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln138_fu_183_p2 = (($signed(val_r_i) < $signed(nw_val_0_reg_114)) ? 1'b1 : 1'b0);

assign nw_val_fu_229_p2 = ($signed(sext_ln134_1_fu_225_p1) + $signed(add_ln134_fu_213_p2));

assign p_str25_address0 = zext_ln122_fu_126_p1;

assign select_ln138_fu_189_p3 = ((icmp_ln138_fu_183_p2[0:0] === 1'b1) ? val_r_i : nw_val_0_reg_114);

assign sext_ln123_fu_156_p1 = $signed(add_ln123_fu_151_p2);

assign sext_ln134_1_fu_225_p1 = $signed(add_ln134_1_fu_219_p2);

assign sext_ln134_fu_172_p1 = add_ln132_fu_166_p2;

assign shl_ln134_1_fu_204_p2 = nw_val_0_reg_114 << 32'd1;

assign shl_ln134_fu_198_p2 = nw_val_0_reg_114 << 32'd3;

assign zext_ln122_1_fu_131_p1 = i_0_i_reg_93;

assign zext_ln122_2_fu_135_p1 = p_str25_q0;

assign zext_ln122_fu_126_p1 = i_0_i_reg_93;

assign zext_ln134_fu_210_p1 = iscsi_connection_par_9_reg_278;

always @ (posedge ap_clk) begin
    zext_ln122_2_reg_246[7] <= 1'b0;
end

endmodule //update_value_int_4
